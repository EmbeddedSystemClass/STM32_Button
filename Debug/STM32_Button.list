
STM32_Button.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001550  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000de0  0800165c  0800165c  0001165c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800243c  0800243c  0001243c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002440  08002440  00012440  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000014  20000000  08002444  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000004d4  20000014  08002458  00020014  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200004e8  08002458  000204e8  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000ff4d  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000239e  00000000  00000000  0002ff8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003e16  00000000  00000000  00032328  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000005c8  00000000  00000000  00036140  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000938  00000000  00000000  00036708  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000473f  00000000  00000000  00037040  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000024e4  00000000  00000000  0003b77f  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0003dc63  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000fd4  00000000  00000000  0003dce0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000014 	.word	0x20000014
 8000128:	00000000 	.word	0x00000000
 800012c:	08001644 	.word	0x08001644

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000018 	.word	0x20000018
 8000148:	08001644 	.word	0x08001644

0800014c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800014c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800014e:	4b0e      	ldr	r3, [pc, #56]	; (8000188 <HAL_InitTick+0x3c>)
{
 8000150:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000152:	7818      	ldrb	r0, [r3, #0]
 8000154:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000158:	fbb3 f3f0 	udiv	r3, r3, r0
 800015c:	4a0b      	ldr	r2, [pc, #44]	; (800018c <HAL_InitTick+0x40>)
 800015e:	6810      	ldr	r0, [r2, #0]
 8000160:	fbb0 f0f3 	udiv	r0, r0, r3
 8000164:	f000 f880 	bl	8000268 <HAL_SYSTICK_Config>
 8000168:	4604      	mov	r4, r0
 800016a:	b958      	cbnz	r0, 8000184 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800016c:	2d0f      	cmp	r5, #15
 800016e:	d809      	bhi.n	8000184 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000170:	4602      	mov	r2, r0
 8000172:	4629      	mov	r1, r5
 8000174:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000178:	f000 f842 	bl	8000200 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <HAL_InitTick+0x44>)
 800017e:	4620      	mov	r0, r4
 8000180:	601d      	str	r5, [r3, #0]
 8000182:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000184:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000186:	bd38      	pop	{r3, r4, r5, pc}
 8000188:	20000000 	.word	0x20000000
 800018c:	20000010 	.word	0x20000010
 8000190:	20000004 	.word	0x20000004

08000194 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000194:	4a07      	ldr	r2, [pc, #28]	; (80001b4 <HAL_Init+0x20>)
{
 8000196:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000198:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800019a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800019c:	f043 0310 	orr.w	r3, r3, #16
 80001a0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001a2:	f000 f81b 	bl	80001dc <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001a6:	2000      	movs	r0, #0
 80001a8:	f7ff ffd0 	bl	800014c <HAL_InitTick>
  HAL_MspInit();
 80001ac:	f001 f92a 	bl	8001404 <HAL_MspInit>
}
 80001b0:	2000      	movs	r0, #0
 80001b2:	bd08      	pop	{r3, pc}
 80001b4:	40022000 	.word	0x40022000

080001b8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80001b8:	4a03      	ldr	r2, [pc, #12]	; (80001c8 <HAL_IncTick+0x10>)
 80001ba:	4b04      	ldr	r3, [pc, #16]	; (80001cc <HAL_IncTick+0x14>)
 80001bc:	6811      	ldr	r1, [r2, #0]
 80001be:	781b      	ldrb	r3, [r3, #0]
 80001c0:	440b      	add	r3, r1
 80001c2:	6013      	str	r3, [r2, #0]
 80001c4:	4770      	bx	lr
 80001c6:	bf00      	nop
 80001c8:	20000490 	.word	0x20000490
 80001cc:	20000000 	.word	0x20000000

080001d0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001d0:	4b01      	ldr	r3, [pc, #4]	; (80001d8 <HAL_GetTick+0x8>)
 80001d2:	6818      	ldr	r0, [r3, #0]
}
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	20000490 	.word	0x20000490

080001dc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001dc:	4a07      	ldr	r2, [pc, #28]	; (80001fc <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80001de:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001e0:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80001e2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80001e6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80001ea:	041b      	lsls	r3, r3, #16
 80001ec:	0c1b      	lsrs	r3, r3, #16
 80001ee:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80001f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80001f6:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80001f8:	60d3      	str	r3, [r2, #12]
 80001fa:	4770      	bx	lr
 80001fc:	e000ed00 	.word	0xe000ed00

08000200 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000200:	4b17      	ldr	r3, [pc, #92]	; (8000260 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000202:	b530      	push	{r4, r5, lr}
 8000204:	68dc      	ldr	r4, [r3, #12]
 8000206:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800020a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800020e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000210:	2b04      	cmp	r3, #4
 8000212:	bf28      	it	cs
 8000214:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000216:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000218:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800021c:	bf98      	it	ls
 800021e:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000220:	fa05 f303 	lsl.w	r3, r5, r3
 8000224:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000228:	bf88      	it	hi
 800022a:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800022c:	4019      	ands	r1, r3
 800022e:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000230:	fa05 f404 	lsl.w	r4, r5, r4
 8000234:	3c01      	subs	r4, #1
 8000236:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000238:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800023a:	ea42 0201 	orr.w	r2, r2, r1
 800023e:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000242:	bfaf      	iteee	ge
 8000244:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000248:	4b06      	ldrlt	r3, [pc, #24]	; (8000264 <HAL_NVIC_SetPriority+0x64>)
 800024a:	f000 000f 	andlt.w	r0, r0, #15
 800024e:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000250:	bfa5      	ittet	ge
 8000252:	b2d2      	uxtbge	r2, r2
 8000254:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000258:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800025a:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 800025e:	bd30      	pop	{r4, r5, pc}
 8000260:	e000ed00 	.word	0xe000ed00
 8000264:	e000ed14 	.word	0xe000ed14

08000268 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000268:	3801      	subs	r0, #1
 800026a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800026e:	d20a      	bcs.n	8000286 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000270:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000272:	4b06      	ldr	r3, [pc, #24]	; (800028c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000274:	4a06      	ldr	r2, [pc, #24]	; (8000290 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000276:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000278:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800027c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800027e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000280:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000282:	601a      	str	r2, [r3, #0]
 8000284:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000286:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000288:	4770      	bx	lr
 800028a:	bf00      	nop
 800028c:	e000e010 	.word	0xe000e010
 8000290:	e000ed00 	.word	0xe000ed00

08000294 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000294:	4b04      	ldr	r3, [pc, #16]	; (80002a8 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000296:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000298:	681a      	ldr	r2, [r3, #0]
 800029a:	bf0c      	ite	eq
 800029c:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80002a0:	f022 0204 	bicne.w	r2, r2, #4
 80002a4:	601a      	str	r2, [r3, #0]
 80002a6:	4770      	bx	lr
 80002a8:	e000e010 	.word	0xe000e010

080002ac <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80002ac:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80002ae:	f000 fef1 	bl	8001094 <HAL_SYSTICK_Callback>
 80002b2:	bd08      	pop	{r3, pc}

080002b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80002b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 80002b8:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 80002ba:	4616      	mov	r6, r2
 80002bc:	4b65      	ldr	r3, [pc, #404]	; (8000454 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80002be:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8000464 <HAL_GPIO_Init+0x1b0>
 80002c2:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8000468 <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 80002c6:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80002ca:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 80002cc:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80002d0:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 80002d4:	45a0      	cmp	r8, r4
 80002d6:	d17f      	bne.n	80003d8 <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 80002d8:	684d      	ldr	r5, [r1, #4]
 80002da:	2d12      	cmp	r5, #18
 80002dc:	f000 80af 	beq.w	800043e <HAL_GPIO_Init+0x18a>
 80002e0:	f200 8088 	bhi.w	80003f4 <HAL_GPIO_Init+0x140>
 80002e4:	2d02      	cmp	r5, #2
 80002e6:	f000 80a7 	beq.w	8000438 <HAL_GPIO_Init+0x184>
 80002ea:	d87c      	bhi.n	80003e6 <HAL_GPIO_Init+0x132>
 80002ec:	2d00      	cmp	r5, #0
 80002ee:	f000 808e 	beq.w	800040e <HAL_GPIO_Init+0x15a>
 80002f2:	2d01      	cmp	r5, #1
 80002f4:	f000 809e 	beq.w	8000434 <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80002f8:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80002fc:	2cff      	cmp	r4, #255	; 0xff
 80002fe:	bf93      	iteet	ls
 8000300:	4682      	movls	sl, r0
 8000302:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8000306:	3d08      	subhi	r5, #8
 8000308:	f8d0 b000 	ldrls.w	fp, [r0]
 800030c:	bf92      	itee	ls
 800030e:	00b5      	lslls	r5, r6, #2
 8000310:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8000314:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000316:	fa09 f805 	lsl.w	r8, r9, r5
 800031a:	ea2b 0808 	bic.w	r8, fp, r8
 800031e:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000322:	bf88      	it	hi
 8000324:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000328:	ea48 0505 	orr.w	r5, r8, r5
 800032c:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000330:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000334:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000338:	d04e      	beq.n	80003d8 <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800033a:	4d47      	ldr	r5, [pc, #284]	; (8000458 <HAL_GPIO_Init+0x1a4>)
 800033c:	4f46      	ldr	r7, [pc, #280]	; (8000458 <HAL_GPIO_Init+0x1a4>)
 800033e:	69ad      	ldr	r5, [r5, #24]
 8000340:	f026 0803 	bic.w	r8, r6, #3
 8000344:	f045 0501 	orr.w	r5, r5, #1
 8000348:	61bd      	str	r5, [r7, #24]
 800034a:	69bd      	ldr	r5, [r7, #24]
 800034c:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000350:	f005 0501 	and.w	r5, r5, #1
 8000354:	9501      	str	r5, [sp, #4]
 8000356:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800035a:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800035e:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000360:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 8000364:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000368:	fa09 f90b 	lsl.w	r9, r9, fp
 800036c:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000370:	4d3a      	ldr	r5, [pc, #232]	; (800045c <HAL_GPIO_Init+0x1a8>)
 8000372:	42a8      	cmp	r0, r5
 8000374:	d068      	beq.n	8000448 <HAL_GPIO_Init+0x194>
 8000376:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800037a:	42a8      	cmp	r0, r5
 800037c:	d066      	beq.n	800044c <HAL_GPIO_Init+0x198>
 800037e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000382:	42a8      	cmp	r0, r5
 8000384:	d064      	beq.n	8000450 <HAL_GPIO_Init+0x19c>
 8000386:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800038a:	42a8      	cmp	r0, r5
 800038c:	bf0c      	ite	eq
 800038e:	2503      	moveq	r5, #3
 8000390:	2504      	movne	r5, #4
 8000392:	fa05 f50b 	lsl.w	r5, r5, fp
 8000396:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 800039a:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800039e:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80003a0:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80003a4:	bf14      	ite	ne
 80003a6:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80003a8:	43a5      	biceq	r5, r4
 80003aa:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80003ac:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80003ae:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80003b2:	bf14      	ite	ne
 80003b4:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80003b6:	43a5      	biceq	r5, r4
 80003b8:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80003ba:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80003bc:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80003c0:	bf14      	ite	ne
 80003c2:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80003c4:	43a5      	biceq	r5, r4
 80003c6:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80003c8:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80003ca:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80003ce:	bf14      	ite	ne
 80003d0:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80003d2:	ea25 0404 	biceq.w	r4, r5, r4
 80003d6:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 80003d8:	3601      	adds	r6, #1
 80003da:	2e10      	cmp	r6, #16
 80003dc:	f47f af73 	bne.w	80002c6 <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 80003e0:	b003      	add	sp, #12
 80003e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 80003e6:	2d03      	cmp	r5, #3
 80003e8:	d022      	beq.n	8000430 <HAL_GPIO_Init+0x17c>
 80003ea:	2d11      	cmp	r5, #17
 80003ec:	d184      	bne.n	80002f8 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80003ee:	68ca      	ldr	r2, [r1, #12]
 80003f0:	3204      	adds	r2, #4
          break;
 80003f2:	e781      	b.n	80002f8 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 80003f4:	4f1a      	ldr	r7, [pc, #104]	; (8000460 <HAL_GPIO_Init+0x1ac>)
 80003f6:	42bd      	cmp	r5, r7
 80003f8:	d009      	beq.n	800040e <HAL_GPIO_Init+0x15a>
 80003fa:	d812      	bhi.n	8000422 <HAL_GPIO_Init+0x16e>
 80003fc:	f8df 906c 	ldr.w	r9, [pc, #108]	; 800046c <HAL_GPIO_Init+0x1b8>
 8000400:	454d      	cmp	r5, r9
 8000402:	d004      	beq.n	800040e <HAL_GPIO_Init+0x15a>
 8000404:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8000408:	454d      	cmp	r5, r9
 800040a:	f47f af75 	bne.w	80002f8 <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800040e:	688a      	ldr	r2, [r1, #8]
 8000410:	b1c2      	cbz	r2, 8000444 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000412:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8000414:	bf0c      	ite	eq
 8000416:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 800041a:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800041e:	2208      	movs	r2, #8
 8000420:	e76a      	b.n	80002f8 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8000422:	4575      	cmp	r5, lr
 8000424:	d0f3      	beq.n	800040e <HAL_GPIO_Init+0x15a>
 8000426:	4565      	cmp	r5, ip
 8000428:	d0f1      	beq.n	800040e <HAL_GPIO_Init+0x15a>
 800042a:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8000470 <HAL_GPIO_Init+0x1bc>
 800042e:	e7eb      	b.n	8000408 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000430:	2200      	movs	r2, #0
 8000432:	e761      	b.n	80002f8 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000434:	68ca      	ldr	r2, [r1, #12]
          break;
 8000436:	e75f      	b.n	80002f8 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000438:	68ca      	ldr	r2, [r1, #12]
 800043a:	3208      	adds	r2, #8
          break;
 800043c:	e75c      	b.n	80002f8 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800043e:	68ca      	ldr	r2, [r1, #12]
 8000440:	320c      	adds	r2, #12
          break;
 8000442:	e759      	b.n	80002f8 <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000444:	2204      	movs	r2, #4
 8000446:	e757      	b.n	80002f8 <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000448:	2500      	movs	r5, #0
 800044a:	e7a2      	b.n	8000392 <HAL_GPIO_Init+0xde>
 800044c:	2501      	movs	r5, #1
 800044e:	e7a0      	b.n	8000392 <HAL_GPIO_Init+0xde>
 8000450:	2502      	movs	r5, #2
 8000452:	e79e      	b.n	8000392 <HAL_GPIO_Init+0xde>
 8000454:	40010400 	.word	0x40010400
 8000458:	40021000 	.word	0x40021000
 800045c:	40010800 	.word	0x40010800
 8000460:	10210000 	.word	0x10210000
 8000464:	10310000 	.word	0x10310000
 8000468:	10320000 	.word	0x10320000
 800046c:	10110000 	.word	0x10110000
 8000470:	10220000 	.word	0x10220000

08000474 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000474:	6883      	ldr	r3, [r0, #8]
 8000476:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8000478:	bf14      	ite	ne
 800047a:	2001      	movne	r0, #1
 800047c:	2000      	moveq	r0, #0
 800047e:	4770      	bx	lr

08000480 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000480:	6802      	ldr	r2, [r0, #0]
 8000482:	6953      	ldr	r3, [r2, #20]
 8000484:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8000488:	d00d      	beq.n	80004a6 <I2C_IsAcknowledgeFailed+0x26>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800048a:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 800048e:	6153      	str	r3, [r2, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8000490:	2304      	movs	r3, #4
    hi2c->PreviousState = I2C_STATE_NONE;
    hi2c->State= HAL_I2C_STATE_READY;
 8000492:	2220      	movs	r2, #32
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8000494:	6403      	str	r3, [r0, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 8000496:	2300      	movs	r3, #0
 8000498:	6303      	str	r3, [r0, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800049a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    hi2c->State= HAL_I2C_STATE_READY;
 800049e:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

    return HAL_ERROR;
 80004a2:	2001      	movs	r0, #1
 80004a4:	4770      	bx	lr
  }
  return HAL_OK;
 80004a6:	4618      	mov	r0, r3
}
 80004a8:	4770      	bx	lr

080004aa <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 80004aa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80004ae:	4604      	mov	r4, r0
 80004b0:	4617      	mov	r7, r2
 80004b2:	4699      	mov	r9, r3
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80004b4:	f3c1 4807 	ubfx	r8, r1, #16, #8
 80004b8:	b28e      	uxth	r6, r1
 80004ba:	6825      	ldr	r5, [r4, #0]
 80004bc:	f1b8 0f01 	cmp.w	r8, #1
 80004c0:	bf0c      	ite	eq
 80004c2:	696b      	ldreq	r3, [r5, #20]
 80004c4:	69ab      	ldrne	r3, [r5, #24]
 80004c6:	ea36 0303 	bics.w	r3, r6, r3
 80004ca:	bf14      	ite	ne
 80004cc:	2001      	movne	r0, #1
 80004ce:	2000      	moveq	r0, #0
 80004d0:	b908      	cbnz	r0, 80004d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x2c>
}
 80004d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80004d6:	696b      	ldr	r3, [r5, #20]
 80004d8:	055a      	lsls	r2, r3, #21
 80004da:	d512      	bpl.n	8000502 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x58>
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80004dc:	682b      	ldr	r3, [r5, #0]
      hi2c->State= HAL_I2C_STATE_READY;
 80004de:	2220      	movs	r2, #32
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80004e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004e4:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80004e6:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 80004ea:	616b      	str	r3, [r5, #20]
      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80004ec:	2304      	movs	r3, #4
 80004ee:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 80004f0:	2300      	movs	r3, #0
      return HAL_ERROR;
 80004f2:	2001      	movs	r0, #1
      hi2c->PreviousState = I2C_STATE_NONE;
 80004f4:	6323      	str	r3, [r4, #48]	; 0x30
      __HAL_UNLOCK(hi2c);
 80004f6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->State= HAL_I2C_STATE_READY;
 80004fa:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      return HAL_ERROR;
 80004fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 8000502:	1c7b      	adds	r3, r7, #1
 8000504:	d0d9      	beq.n	80004ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000506:	b94f      	cbnz	r7, 800051c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x72>
        hi2c->PreviousState = I2C_STATE_NONE;
 8000508:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 800050a:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 800050c:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 800050e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8000512:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        return HAL_TIMEOUT;
 8000516:	2003      	movs	r0, #3
 8000518:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800051c:	f7ff fe58 	bl	80001d0 <HAL_GetTick>
 8000520:	eba0 0009 	sub.w	r0, r0, r9
 8000524:	4287      	cmp	r7, r0
 8000526:	d2c8      	bcs.n	80004ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
 8000528:	e7ee      	b.n	8000508 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5e>

0800052a <I2C_WaitOnFlagUntilTimeout>:
{
 800052a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800052e:	4604      	mov	r4, r0
 8000530:	4690      	mov	r8, r2
 8000532:	461f      	mov	r7, r3
 8000534:	9e08      	ldr	r6, [sp, #32]
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8000536:	f3c1 4907 	ubfx	r9, r1, #16, #8
 800053a:	b28d      	uxth	r5, r1
 800053c:	6823      	ldr	r3, [r4, #0]
 800053e:	f1b9 0f01 	cmp.w	r9, #1
 8000542:	bf0c      	ite	eq
 8000544:	695b      	ldreq	r3, [r3, #20]
 8000546:	699b      	ldrne	r3, [r3, #24]
 8000548:	ea35 0303 	bics.w	r3, r5, r3
 800054c:	bf0c      	ite	eq
 800054e:	2301      	moveq	r3, #1
 8000550:	2300      	movne	r3, #0
 8000552:	4543      	cmp	r3, r8
 8000554:	d002      	beq.n	800055c <I2C_WaitOnFlagUntilTimeout+0x32>
  return HAL_OK;
 8000556:	2000      	movs	r0, #0
}
 8000558:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 800055c:	1c7b      	adds	r3, r7, #1
 800055e:	d0ed      	beq.n	800053c <I2C_WaitOnFlagUntilTimeout+0x12>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000560:	b95f      	cbnz	r7, 800057a <I2C_WaitOnFlagUntilTimeout+0x50>
        hi2c->PreviousState = I2C_STATE_NONE;
 8000562:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 8000564:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8000566:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8000568:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 800056c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8000570:	2003      	movs	r0, #3
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8000572:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8000576:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800057a:	f7ff fe29 	bl	80001d0 <HAL_GetTick>
 800057e:	1b80      	subs	r0, r0, r6
 8000580:	4287      	cmp	r7, r0
 8000582:	d2db      	bcs.n	800053c <I2C_WaitOnFlagUntilTimeout+0x12>
 8000584:	e7ed      	b.n	8000562 <I2C_WaitOnFlagUntilTimeout+0x38>

08000586 <I2C_WaitOnTXEFlagUntilTimeout>:
{    
 8000586:	b570      	push	{r4, r5, r6, lr}
 8000588:	4604      	mov	r4, r0
 800058a:	460d      	mov	r5, r1
 800058c:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800058e:	6823      	ldr	r3, [r4, #0]
 8000590:	695b      	ldr	r3, [r3, #20]
 8000592:	061b      	lsls	r3, r3, #24
 8000594:	d501      	bpl.n	800059a <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;      
 8000596:	2000      	movs	r0, #0
 8000598:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800059a:	4620      	mov	r0, r4
 800059c:	f7ff ff70 	bl	8000480 <I2C_IsAcknowledgeFailed>
 80005a0:	b9a8      	cbnz	r0, 80005ce <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 80005a2:	1c6a      	adds	r2, r5, #1
 80005a4:	d0f3      	beq.n	800058e <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80005a6:	b965      	cbnz	r5, 80005c2 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80005a8:	6c23      	ldr	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 80005aa:	2220      	movs	r2, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80005ac:	f043 0320 	orr.w	r3, r3, #32
 80005b0:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 80005b2:	2300      	movs	r3, #0
        __HAL_UNLOCK(hi2c);
 80005b4:	2003      	movs	r0, #3
        hi2c->PreviousState = I2C_STATE_NONE;
 80005b6:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 80005b8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 80005bc:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
 80005c0:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80005c2:	f7ff fe05 	bl	80001d0 <HAL_GetTick>
 80005c6:	1b80      	subs	r0, r0, r6
 80005c8:	4285      	cmp	r5, r0
 80005ca:	d2e0      	bcs.n	800058e <I2C_WaitOnTXEFlagUntilTimeout+0x8>
 80005cc:	e7ec      	b.n	80005a8 <I2C_WaitOnTXEFlagUntilTimeout+0x22>
      return HAL_ERROR;
 80005ce:	2001      	movs	r0, #1
}
 80005d0:	bd70      	pop	{r4, r5, r6, pc}
	...

080005d4 <I2C_RequestMemoryWrite>:
{
 80005d4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80005d8:	4615      	mov	r5, r2
  hi2c->Instance->CR1 |= I2C_CR1_START;
 80005da:	6802      	ldr	r2, [r0, #0]
{
 80005dc:	4698      	mov	r8, r3
  hi2c->Instance->CR1 |= I2C_CR1_START;
 80005de:	6813      	ldr	r3, [r2, #0]
{
 80005e0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  hi2c->Instance->CR1 |= I2C_CR1_START;
 80005e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005e6:	6013      	str	r3, [r2, #0]
{
 80005e8:	460f      	mov	r7, r1
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80005ea:	9600      	str	r6, [sp, #0]
 80005ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80005ee:	2200      	movs	r2, #0
 80005f0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 80005f4:	4604      	mov	r4, r0
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80005f6:	f7ff ff98 	bl	800052a <I2C_WaitOnFlagUntilTimeout>
 80005fa:	b968      	cbnz	r0, 8000618 <I2C_RequestMemoryWrite+0x44>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80005fc:	6823      	ldr	r3, [r4, #0]
 80005fe:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
 8000602:	611f      	str	r7, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000604:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8000606:	4633      	mov	r3, r6
 8000608:	491a      	ldr	r1, [pc, #104]	; (8000674 <I2C_RequestMemoryWrite+0xa0>)
 800060a:	4620      	mov	r0, r4
 800060c:	f7ff ff4d 	bl	80004aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000610:	b130      	cbz	r0, 8000620 <I2C_RequestMemoryWrite+0x4c>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000612:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000614:	2b04      	cmp	r3, #4
 8000616:	d018      	beq.n	800064a <I2C_RequestMemoryWrite+0x76>
      return HAL_TIMEOUT;
 8000618:	2003      	movs	r0, #3
}
 800061a:	b004      	add	sp, #16
 800061c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000620:	6823      	ldr	r3, [r4, #0]
 8000622:	9003      	str	r0, [sp, #12]
 8000624:	695a      	ldr	r2, [r3, #20]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000626:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000628:	9203      	str	r2, [sp, #12]
 800062a:	699b      	ldr	r3, [r3, #24]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800062c:	4632      	mov	r2, r6
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800062e:	9303      	str	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000630:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000632:	9b03      	ldr	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000634:	f7ff ffa7 	bl	8000586 <I2C_WaitOnTXEFlagUntilTimeout>
 8000638:	b148      	cbz	r0, 800064e <I2C_RequestMemoryWrite+0x7a>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800063a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800063c:	2b04      	cmp	r3, #4
 800063e:	d1eb      	bne.n	8000618 <I2C_RequestMemoryWrite+0x44>
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000640:	6822      	ldr	r2, [r4, #0]
 8000642:	6813      	ldr	r3, [r2, #0]
 8000644:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000648:	6013      	str	r3, [r2, #0]
      return HAL_ERROR;
 800064a:	2001      	movs	r0, #1
 800064c:	e7e5      	b.n	800061a <I2C_RequestMemoryWrite+0x46>
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800064e:	f1b8 0f01 	cmp.w	r8, #1
 8000652:	6823      	ldr	r3, [r4, #0]
 8000654:	d102      	bne.n	800065c <I2C_RequestMemoryWrite+0x88>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8000656:	b2ed      	uxtb	r5, r5
 8000658:	611d      	str	r5, [r3, #16]
 800065a:	e7de      	b.n	800061a <I2C_RequestMemoryWrite+0x46>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800065c:	0a2a      	lsrs	r2, r5, #8
 800065e:	611a      	str	r2, [r3, #16]
    if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000660:	990a      	ldr	r1, [sp, #40]	; 0x28
 8000662:	4632      	mov	r2, r6
 8000664:	4620      	mov	r0, r4
 8000666:	f7ff ff8e 	bl	8000586 <I2C_WaitOnTXEFlagUntilTimeout>
 800066a:	2800      	cmp	r0, #0
 800066c:	d1e5      	bne.n	800063a <I2C_RequestMemoryWrite+0x66>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800066e:	6823      	ldr	r3, [r4, #0]
 8000670:	e7f1      	b.n	8000656 <I2C_RequestMemoryWrite+0x82>
 8000672:	bf00      	nop
 8000674:	00010002 	.word	0x00010002

08000678 <I2C_WaitOnBTFFlagUntilTimeout>:
{  
 8000678:	b570      	push	{r4, r5, r6, lr}
 800067a:	4604      	mov	r4, r0
 800067c:	460d      	mov	r5, r1
 800067e:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8000680:	6823      	ldr	r3, [r4, #0]
 8000682:	695b      	ldr	r3, [r3, #20]
 8000684:	075b      	lsls	r3, r3, #29
 8000686:	d501      	bpl.n	800068c <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 8000688:	2000      	movs	r0, #0
 800068a:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800068c:	4620      	mov	r0, r4
 800068e:	f7ff fef7 	bl	8000480 <I2C_IsAcknowledgeFailed>
 8000692:	b9a8      	cbnz	r0, 80006c0 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 8000694:	1c6a      	adds	r2, r5, #1
 8000696:	d0f3      	beq.n	8000680 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8000698:	b965      	cbnz	r5, 80006b4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800069a:	6c23      	ldr	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 800069c:	2220      	movs	r2, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800069e:	f043 0320 	orr.w	r3, r3, #32
 80006a2:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 80006a4:	2300      	movs	r3, #0
        __HAL_UNLOCK(hi2c);
 80006a6:	2003      	movs	r0, #3
        hi2c->PreviousState = I2C_STATE_NONE;
 80006a8:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 80006aa:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 80006ae:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80006b4:	f7ff fd8c 	bl	80001d0 <HAL_GetTick>
 80006b8:	1b80      	subs	r0, r0, r6
 80006ba:	4285      	cmp	r5, r0
 80006bc:	d2e0      	bcs.n	8000680 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
 80006be:	e7ec      	b.n	800069a <I2C_WaitOnBTFFlagUntilTimeout+0x22>
      return HAL_ERROR;
 80006c0:	2001      	movs	r0, #1
}
 80006c2:	bd70      	pop	{r4, r5, r6, pc}

080006c4 <HAL_I2C_Init>:
{
 80006c4:	b538      	push	{r3, r4, r5, lr}
  if(hi2c == NULL)
 80006c6:	4604      	mov	r4, r0
 80006c8:	b908      	cbnz	r0, 80006ce <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 80006ca:	2001      	movs	r0, #1
 80006cc:	bd38      	pop	{r3, r4, r5, pc}
  if(hi2c->State == HAL_I2C_STATE_RESET)
 80006ce:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80006d2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80006d6:	b91b      	cbnz	r3, 80006e0 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 80006d8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 80006dc:	f000 fc98 	bl	8001010 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80006e0:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 80006e2:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 80006e4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80006e8:	6813      	ldr	r3, [r2, #0]
 80006ea:	f023 0301 	bic.w	r3, r3, #1
 80006ee:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80006f0:	f000 fb70 	bl	8000dd4 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80006f4:	6863      	ldr	r3, [r4, #4]
 80006f6:	4a2f      	ldr	r2, [pc, #188]	; (80007b4 <HAL_I2C_Init+0xf0>)
 80006f8:	4293      	cmp	r3, r2
 80006fa:	d830      	bhi.n	800075e <HAL_I2C_Init+0x9a>
 80006fc:	4a2e      	ldr	r2, [pc, #184]	; (80007b8 <HAL_I2C_Init+0xf4>)
 80006fe:	4290      	cmp	r0, r2
 8000700:	d9e3      	bls.n	80006ca <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 8000702:	4a2e      	ldr	r2, [pc, #184]	; (80007bc <HAL_I2C_Init+0xf8>)
  hi2c->Instance->CR2 = freqrange;
 8000704:	6821      	ldr	r1, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8000706:	fbb0 f2f2 	udiv	r2, r0, r2
  hi2c->Instance->CR2 = freqrange;
 800070a:	604a      	str	r2, [r1, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 800070c:	3201      	adds	r2, #1
 800070e:	620a      	str	r2, [r1, #32]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8000710:	4a28      	ldr	r2, [pc, #160]	; (80007b4 <HAL_I2C_Init+0xf0>)
 8000712:	3801      	subs	r0, #1
 8000714:	4293      	cmp	r3, r2
 8000716:	d832      	bhi.n	800077e <HAL_I2C_Init+0xba>
 8000718:	005b      	lsls	r3, r3, #1
 800071a:	fbb0 f0f3 	udiv	r0, r0, r3
 800071e:	1c43      	adds	r3, r0, #1
 8000720:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000724:	2b04      	cmp	r3, #4
 8000726:	bf38      	it	cc
 8000728:	2304      	movcc	r3, #4
 800072a:	61cb      	str	r3, [r1, #28]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800072c:	6a22      	ldr	r2, [r4, #32]
 800072e:	69e3      	ldr	r3, [r4, #28]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000730:	2000      	movs	r0, #0
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000732:	4313      	orrs	r3, r2
 8000734:	600b      	str	r3, [r1, #0]
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8000736:	68e2      	ldr	r2, [r4, #12]
 8000738:	6923      	ldr	r3, [r4, #16]
 800073a:	4313      	orrs	r3, r2
 800073c:	608b      	str	r3, [r1, #8]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 800073e:	69a2      	ldr	r2, [r4, #24]
 8000740:	6963      	ldr	r3, [r4, #20]
 8000742:	4313      	orrs	r3, r2
 8000744:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 8000746:	680b      	ldr	r3, [r1, #0]
 8000748:	f043 0301 	orr.w	r3, r3, #1
 800074c:	600b      	str	r3, [r1, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 800074e:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000750:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000752:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000756:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000758:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 800075c:	bd38      	pop	{r3, r4, r5, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800075e:	4a18      	ldr	r2, [pc, #96]	; (80007c0 <HAL_I2C_Init+0xfc>)
 8000760:	4290      	cmp	r0, r2
 8000762:	d9b2      	bls.n	80006ca <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 8000764:	4d15      	ldr	r5, [pc, #84]	; (80007bc <HAL_I2C_Init+0xf8>)
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000766:	f44f 7296 	mov.w	r2, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 800076a:	fbb0 f5f5 	udiv	r5, r0, r5
  hi2c->Instance->CR2 = freqrange;
 800076e:	6821      	ldr	r1, [r4, #0]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000770:	436a      	muls	r2, r5
  hi2c->Instance->CR2 = freqrange;
 8000772:	604d      	str	r5, [r1, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000774:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8000778:	fbb2 f2f5 	udiv	r2, r2, r5
 800077c:	e7c6      	b.n	800070c <HAL_I2C_Init+0x48>
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 800077e:	68a2      	ldr	r2, [r4, #8]
 8000780:	b952      	cbnz	r2, 8000798 <HAL_I2C_Init+0xd4>
 8000782:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000786:	fbb0 f0f3 	udiv	r0, r0, r3
 800078a:	1c43      	adds	r3, r0, #1
 800078c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000790:	b16b      	cbz	r3, 80007ae <HAL_I2C_Init+0xea>
 8000792:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000796:	e7c8      	b.n	800072a <HAL_I2C_Init+0x66>
 8000798:	2219      	movs	r2, #25
 800079a:	4353      	muls	r3, r2
 800079c:	fbb0 f0f3 	udiv	r0, r0, r3
 80007a0:	1c43      	adds	r3, r0, #1
 80007a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80007a6:	b113      	cbz	r3, 80007ae <HAL_I2C_Init+0xea>
 80007a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007ac:	e7bd      	b.n	800072a <HAL_I2C_Init+0x66>
 80007ae:	2301      	movs	r3, #1
 80007b0:	e7bb      	b.n	800072a <HAL_I2C_Init+0x66>
 80007b2:	bf00      	nop
 80007b4:	000186a0 	.word	0x000186a0
 80007b8:	001e847f 	.word	0x001e847f
 80007bc:	000f4240 	.word	0x000f4240
 80007c0:	003d08ff 	.word	0x003d08ff

080007c4 <HAL_I2C_Mem_Write>:
{
 80007c4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80007c8:	4604      	mov	r4, r0
 80007ca:	469a      	mov	sl, r3
 80007cc:	4688      	mov	r8, r1
 80007ce:	4691      	mov	r9, r2
 80007d0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  tickstart = HAL_GetTick();
 80007d2:	f7ff fcfd 	bl	80001d0 <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 80007d6:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  tickstart = HAL_GetTick();
 80007da:	4605      	mov	r5, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 80007dc:	2b20      	cmp	r3, #32
 80007de:	d003      	beq.n	80007e8 <HAL_I2C_Mem_Write+0x24>
    return HAL_BUSY;
 80007e0:	2002      	movs	r0, #2
}
 80007e2:	b002      	add	sp, #8
 80007e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80007e8:	9000      	str	r0, [sp, #0]
 80007ea:	2319      	movs	r3, #25
 80007ec:	2201      	movs	r2, #1
 80007ee:	493e      	ldr	r1, [pc, #248]	; (80008e8 <HAL_I2C_Mem_Write+0x124>)
 80007f0:	4620      	mov	r0, r4
 80007f2:	f7ff fe9a 	bl	800052a <I2C_WaitOnFlagUntilTimeout>
 80007f6:	2800      	cmp	r0, #0
 80007f8:	d1f2      	bne.n	80007e0 <HAL_I2C_Mem_Write+0x1c>
    __HAL_LOCK(hi2c);
 80007fa:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80007fe:	2b01      	cmp	r3, #1
 8000800:	d0ee      	beq.n	80007e0 <HAL_I2C_Mem_Write+0x1c>
 8000802:	2301      	movs	r3, #1
 8000804:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000808:	6823      	ldr	r3, [r4, #0]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800080a:	2700      	movs	r7, #0
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800080c:	681a      	ldr	r2, [r3, #0]
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800080e:	4641      	mov	r1, r8
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000810:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8000812:	bf58      	it	pl
 8000814:	681a      	ldrpl	r2, [r3, #0]
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8000816:	4620      	mov	r0, r4
      __HAL_I2C_ENABLE(hi2c);
 8000818:	bf5c      	itt	pl
 800081a:	f042 0201 	orrpl.w	r2, r2, #1
 800081e:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8000820:	681a      	ldr	r2, [r3, #0]
 8000822:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000826:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000828:	2321      	movs	r3, #33	; 0x21
 800082a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800082e:	2340      	movs	r3, #64	; 0x40
 8000830:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->pBuffPtr    = pData;
 8000834:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000836:	6427      	str	r7, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8000838:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 800083a:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800083e:	9501      	str	r5, [sp, #4]
    hi2c->XferCount   = Size;
 8000840:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000842:	4b2a      	ldr	r3, [pc, #168]	; (80008ec <HAL_I2C_Mem_Write+0x128>)
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8000844:	9600      	str	r6, [sp, #0]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000846:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8000848:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800084a:	464a      	mov	r2, r9
    hi2c->XferSize    = hi2c->XferCount;
 800084c:	8523      	strh	r3, [r4, #40]	; 0x28
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800084e:	4653      	mov	r3, sl
 8000850:	f7ff fec0 	bl	80005d4 <I2C_RequestMemoryWrite>
 8000854:	2800      	cmp	r0, #0
 8000856:	d02a      	beq.n	80008ae <HAL_I2C_Mem_Write+0xea>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000858:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800085a:	f884 703c 	strb.w	r7, [r4, #60]	; 0x3c
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800085e:	2b04      	cmp	r3, #4
 8000860:	d107      	bne.n	8000872 <HAL_I2C_Mem_Write+0xae>
        return HAL_ERROR;
 8000862:	2001      	movs	r0, #1
 8000864:	e7bd      	b.n	80007e2 <HAL_I2C_Mem_Write+0x1e>
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000866:	f7ff fe8e 	bl	8000586 <I2C_WaitOnTXEFlagUntilTimeout>
 800086a:	b120      	cbz	r0, 8000876 <HAL_I2C_Mem_Write+0xb2>
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800086c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800086e:	2b04      	cmp	r3, #4
 8000870:	d034      	beq.n	80008dc <HAL_I2C_Mem_Write+0x118>
          return HAL_TIMEOUT;
 8000872:	2003      	movs	r0, #3
 8000874:	e7b5      	b.n	80007e2 <HAL_I2C_Mem_Write+0x1e>
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8000876:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000878:	6827      	ldr	r7, [r4, #0]
 800087a:	1c4b      	adds	r3, r1, #1
 800087c:	6263      	str	r3, [r4, #36]	; 0x24
 800087e:	780b      	ldrb	r3, [r1, #0]
      hi2c->XferSize--;
 8000880:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8000882:	613b      	str	r3, [r7, #16]
      hi2c->XferCount--;
 8000884:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8000886:	1e50      	subs	r0, r2, #1
      hi2c->XferCount--;
 8000888:	3b01      	subs	r3, #1
 800088a:	b29b      	uxth	r3, r3
 800088c:	8563      	strh	r3, [r4, #42]	; 0x2a
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800088e:	697b      	ldr	r3, [r7, #20]
      hi2c->XferSize--;
 8000890:	b280      	uxth	r0, r0
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8000892:	075b      	lsls	r3, r3, #29
      hi2c->XferSize--;
 8000894:	8520      	strh	r0, [r4, #40]	; 0x28
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8000896:	d50a      	bpl.n	80008ae <HAL_I2C_Mem_Write+0xea>
 8000898:	b148      	cbz	r0, 80008ae <HAL_I2C_Mem_Write+0xea>
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 800089a:	1c8b      	adds	r3, r1, #2
 800089c:	6263      	str	r3, [r4, #36]	; 0x24
 800089e:	784b      	ldrb	r3, [r1, #1]
        hi2c->XferSize--;
 80008a0:	3a02      	subs	r2, #2
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80008a2:	613b      	str	r3, [r7, #16]
        hi2c->XferCount--;
 80008a4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 80008a6:	8522      	strh	r2, [r4, #40]	; 0x28
        hi2c->XferCount--;
 80008a8:	3b01      	subs	r3, #1
 80008aa:	b29b      	uxth	r3, r3
 80008ac:	8563      	strh	r3, [r4, #42]	; 0x2a
    while(hi2c->XferSize > 0U)
 80008ae:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80008b0:	462a      	mov	r2, r5
 80008b2:	4631      	mov	r1, r6
 80008b4:	4620      	mov	r0, r4
    while(hi2c->XferSize > 0U)
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d1d5      	bne.n	8000866 <HAL_I2C_Mem_Write+0xa2>
    if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80008ba:	f7ff fedd 	bl	8000678 <I2C_WaitOnBTFFlagUntilTimeout>
 80008be:	2800      	cmp	r0, #0
 80008c0:	d1d4      	bne.n	800086c <HAL_I2C_Mem_Write+0xa8>
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80008c2:	6822      	ldr	r2, [r4, #0]
 80008c4:	6813      	ldr	r3, [r2, #0]
 80008c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008ca:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80008cc:	2320      	movs	r3, #32
    __HAL_UNLOCK(hi2c);
 80008ce:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 80008d2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80008d6:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    return HAL_OK;
 80008da:	e782      	b.n	80007e2 <HAL_I2C_Mem_Write+0x1e>
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80008dc:	6822      	ldr	r2, [r4, #0]
 80008de:	6813      	ldr	r3, [r2, #0]
 80008e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008e4:	6013      	str	r3, [r2, #0]
 80008e6:	e7bc      	b.n	8000862 <HAL_I2C_Mem_Write+0x9e>
 80008e8:	00100002 	.word	0x00100002
 80008ec:	ffff0000 	.word	0xffff0000

080008f0 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80008f0:	6803      	ldr	r3, [r0, #0]
{
 80008f2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80008f6:	07db      	lsls	r3, r3, #31
{
 80008f8:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80008fa:	d410      	bmi.n	800091e <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80008fc:	682b      	ldr	r3, [r5, #0]
 80008fe:	079f      	lsls	r7, r3, #30
 8000900:	d45e      	bmi.n	80009c0 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000902:	682b      	ldr	r3, [r5, #0]
 8000904:	0719      	lsls	r1, r3, #28
 8000906:	f100 8095 	bmi.w	8000a34 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800090a:	682b      	ldr	r3, [r5, #0]
 800090c:	075a      	lsls	r2, r3, #29
 800090e:	f100 80bf 	bmi.w	8000a90 <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000912:	69ea      	ldr	r2, [r5, #28]
 8000914:	2a00      	cmp	r2, #0
 8000916:	f040 812d 	bne.w	8000b74 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 800091a:	2000      	movs	r0, #0
 800091c:	e014      	b.n	8000948 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800091e:	4c90      	ldr	r4, [pc, #576]	; (8000b60 <HAL_RCC_OscConfig+0x270>)
 8000920:	6863      	ldr	r3, [r4, #4]
 8000922:	f003 030c 	and.w	r3, r3, #12
 8000926:	2b04      	cmp	r3, #4
 8000928:	d007      	beq.n	800093a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800092a:	6863      	ldr	r3, [r4, #4]
 800092c:	f003 030c 	and.w	r3, r3, #12
 8000930:	2b08      	cmp	r3, #8
 8000932:	d10c      	bne.n	800094e <HAL_RCC_OscConfig+0x5e>
 8000934:	6863      	ldr	r3, [r4, #4]
 8000936:	03de      	lsls	r6, r3, #15
 8000938:	d509      	bpl.n	800094e <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800093a:	6823      	ldr	r3, [r4, #0]
 800093c:	039c      	lsls	r4, r3, #14
 800093e:	d5dd      	bpl.n	80008fc <HAL_RCC_OscConfig+0xc>
 8000940:	686b      	ldr	r3, [r5, #4]
 8000942:	2b00      	cmp	r3, #0
 8000944:	d1da      	bne.n	80008fc <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000946:	2001      	movs	r0, #1
}
 8000948:	b002      	add	sp, #8
 800094a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800094e:	686b      	ldr	r3, [r5, #4]
 8000950:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000954:	d110      	bne.n	8000978 <HAL_RCC_OscConfig+0x88>
 8000956:	6823      	ldr	r3, [r4, #0]
 8000958:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800095c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800095e:	f7ff fc37 	bl	80001d0 <HAL_GetTick>
 8000962:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000964:	6823      	ldr	r3, [r4, #0]
 8000966:	0398      	lsls	r0, r3, #14
 8000968:	d4c8      	bmi.n	80008fc <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800096a:	f7ff fc31 	bl	80001d0 <HAL_GetTick>
 800096e:	1b80      	subs	r0, r0, r6
 8000970:	2864      	cmp	r0, #100	; 0x64
 8000972:	d9f7      	bls.n	8000964 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8000974:	2003      	movs	r0, #3
 8000976:	e7e7      	b.n	8000948 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000978:	b99b      	cbnz	r3, 80009a2 <HAL_RCC_OscConfig+0xb2>
 800097a:	6823      	ldr	r3, [r4, #0]
 800097c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000980:	6023      	str	r3, [r4, #0]
 8000982:	6823      	ldr	r3, [r4, #0]
 8000984:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000988:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800098a:	f7ff fc21 	bl	80001d0 <HAL_GetTick>
 800098e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000990:	6823      	ldr	r3, [r4, #0]
 8000992:	0399      	lsls	r1, r3, #14
 8000994:	d5b2      	bpl.n	80008fc <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000996:	f7ff fc1b 	bl	80001d0 <HAL_GetTick>
 800099a:	1b80      	subs	r0, r0, r6
 800099c:	2864      	cmp	r0, #100	; 0x64
 800099e:	d9f7      	bls.n	8000990 <HAL_RCC_OscConfig+0xa0>
 80009a0:	e7e8      	b.n	8000974 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80009a2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80009a6:	6823      	ldr	r3, [r4, #0]
 80009a8:	d103      	bne.n	80009b2 <HAL_RCC_OscConfig+0xc2>
 80009aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009ae:	6023      	str	r3, [r4, #0]
 80009b0:	e7d1      	b.n	8000956 <HAL_RCC_OscConfig+0x66>
 80009b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80009b6:	6023      	str	r3, [r4, #0]
 80009b8:	6823      	ldr	r3, [r4, #0]
 80009ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80009be:	e7cd      	b.n	800095c <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80009c0:	4c67      	ldr	r4, [pc, #412]	; (8000b60 <HAL_RCC_OscConfig+0x270>)
 80009c2:	6863      	ldr	r3, [r4, #4]
 80009c4:	f013 0f0c 	tst.w	r3, #12
 80009c8:	d007      	beq.n	80009da <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80009ca:	6863      	ldr	r3, [r4, #4]
 80009cc:	f003 030c 	and.w	r3, r3, #12
 80009d0:	2b08      	cmp	r3, #8
 80009d2:	d110      	bne.n	80009f6 <HAL_RCC_OscConfig+0x106>
 80009d4:	6863      	ldr	r3, [r4, #4]
 80009d6:	03da      	lsls	r2, r3, #15
 80009d8:	d40d      	bmi.n	80009f6 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80009da:	6823      	ldr	r3, [r4, #0]
 80009dc:	079b      	lsls	r3, r3, #30
 80009de:	d502      	bpl.n	80009e6 <HAL_RCC_OscConfig+0xf6>
 80009e0:	692b      	ldr	r3, [r5, #16]
 80009e2:	2b01      	cmp	r3, #1
 80009e4:	d1af      	bne.n	8000946 <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80009e6:	6823      	ldr	r3, [r4, #0]
 80009e8:	696a      	ldr	r2, [r5, #20]
 80009ea:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80009ee:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80009f2:	6023      	str	r3, [r4, #0]
 80009f4:	e785      	b.n	8000902 <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80009f6:	692a      	ldr	r2, [r5, #16]
 80009f8:	4b5a      	ldr	r3, [pc, #360]	; (8000b64 <HAL_RCC_OscConfig+0x274>)
 80009fa:	b16a      	cbz	r2, 8000a18 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 80009fc:	2201      	movs	r2, #1
 80009fe:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000a00:	f7ff fbe6 	bl	80001d0 <HAL_GetTick>
 8000a04:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a06:	6823      	ldr	r3, [r4, #0]
 8000a08:	079f      	lsls	r7, r3, #30
 8000a0a:	d4ec      	bmi.n	80009e6 <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a0c:	f7ff fbe0 	bl	80001d0 <HAL_GetTick>
 8000a10:	1b80      	subs	r0, r0, r6
 8000a12:	2802      	cmp	r0, #2
 8000a14:	d9f7      	bls.n	8000a06 <HAL_RCC_OscConfig+0x116>
 8000a16:	e7ad      	b.n	8000974 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8000a18:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000a1a:	f7ff fbd9 	bl	80001d0 <HAL_GetTick>
 8000a1e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a20:	6823      	ldr	r3, [r4, #0]
 8000a22:	0798      	lsls	r0, r3, #30
 8000a24:	f57f af6d 	bpl.w	8000902 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a28:	f7ff fbd2 	bl	80001d0 <HAL_GetTick>
 8000a2c:	1b80      	subs	r0, r0, r6
 8000a2e:	2802      	cmp	r0, #2
 8000a30:	d9f6      	bls.n	8000a20 <HAL_RCC_OscConfig+0x130>
 8000a32:	e79f      	b.n	8000974 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000a34:	69aa      	ldr	r2, [r5, #24]
 8000a36:	4c4a      	ldr	r4, [pc, #296]	; (8000b60 <HAL_RCC_OscConfig+0x270>)
 8000a38:	4b4b      	ldr	r3, [pc, #300]	; (8000b68 <HAL_RCC_OscConfig+0x278>)
 8000a3a:	b1da      	cbz	r2, 8000a74 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000a40:	f7ff fbc6 	bl	80001d0 <HAL_GetTick>
 8000a44:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000a48:	079b      	lsls	r3, r3, #30
 8000a4a:	d50d      	bpl.n	8000a68 <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000a4c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000a50:	4b46      	ldr	r3, [pc, #280]	; (8000b6c <HAL_RCC_OscConfig+0x27c>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	fbb3 f3f2 	udiv	r3, r3, r2
 8000a58:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8000a5a:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8000a5c:	9b01      	ldr	r3, [sp, #4]
 8000a5e:	1e5a      	subs	r2, r3, #1
 8000a60:	9201      	str	r2, [sp, #4]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d1f9      	bne.n	8000a5a <HAL_RCC_OscConfig+0x16a>
 8000a66:	e750      	b.n	800090a <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a68:	f7ff fbb2 	bl	80001d0 <HAL_GetTick>
 8000a6c:	1b80      	subs	r0, r0, r6
 8000a6e:	2802      	cmp	r0, #2
 8000a70:	d9e9      	bls.n	8000a46 <HAL_RCC_OscConfig+0x156>
 8000a72:	e77f      	b.n	8000974 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8000a74:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000a76:	f7ff fbab 	bl	80001d0 <HAL_GetTick>
 8000a7a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a7c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000a7e:	079f      	lsls	r7, r3, #30
 8000a80:	f57f af43 	bpl.w	800090a <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a84:	f7ff fba4 	bl	80001d0 <HAL_GetTick>
 8000a88:	1b80      	subs	r0, r0, r6
 8000a8a:	2802      	cmp	r0, #2
 8000a8c:	d9f6      	bls.n	8000a7c <HAL_RCC_OscConfig+0x18c>
 8000a8e:	e771      	b.n	8000974 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000a90:	4c33      	ldr	r4, [pc, #204]	; (8000b60 <HAL_RCC_OscConfig+0x270>)
 8000a92:	69e3      	ldr	r3, [r4, #28]
 8000a94:	00d8      	lsls	r0, r3, #3
 8000a96:	d424      	bmi.n	8000ae2 <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 8000a98:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000a9a:	69e3      	ldr	r3, [r4, #28]
 8000a9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aa0:	61e3      	str	r3, [r4, #28]
 8000aa2:	69e3      	ldr	r3, [r4, #28]
 8000aa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aa8:	9300      	str	r3, [sp, #0]
 8000aaa:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000aac:	4e30      	ldr	r6, [pc, #192]	; (8000b70 <HAL_RCC_OscConfig+0x280>)
 8000aae:	6833      	ldr	r3, [r6, #0]
 8000ab0:	05d9      	lsls	r1, r3, #23
 8000ab2:	d518      	bpl.n	8000ae6 <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ab4:	68eb      	ldr	r3, [r5, #12]
 8000ab6:	2b01      	cmp	r3, #1
 8000ab8:	d126      	bne.n	8000b08 <HAL_RCC_OscConfig+0x218>
 8000aba:	6a23      	ldr	r3, [r4, #32]
 8000abc:	f043 0301 	orr.w	r3, r3, #1
 8000ac0:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000ac2:	f7ff fb85 	bl	80001d0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ac6:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000aca:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000acc:	6a23      	ldr	r3, [r4, #32]
 8000ace:	079b      	lsls	r3, r3, #30
 8000ad0:	d53f      	bpl.n	8000b52 <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 8000ad2:	2f00      	cmp	r7, #0
 8000ad4:	f43f af1d 	beq.w	8000912 <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ad8:	69e3      	ldr	r3, [r4, #28]
 8000ada:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000ade:	61e3      	str	r3, [r4, #28]
 8000ae0:	e717      	b.n	8000912 <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8000ae2:	2700      	movs	r7, #0
 8000ae4:	e7e2      	b.n	8000aac <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ae6:	6833      	ldr	r3, [r6, #0]
 8000ae8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000aec:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000aee:	f7ff fb6f 	bl	80001d0 <HAL_GetTick>
 8000af2:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000af4:	6833      	ldr	r3, [r6, #0]
 8000af6:	05da      	lsls	r2, r3, #23
 8000af8:	d4dc      	bmi.n	8000ab4 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000afa:	f7ff fb69 	bl	80001d0 <HAL_GetTick>
 8000afe:	eba0 0008 	sub.w	r0, r0, r8
 8000b02:	2864      	cmp	r0, #100	; 0x64
 8000b04:	d9f6      	bls.n	8000af4 <HAL_RCC_OscConfig+0x204>
 8000b06:	e735      	b.n	8000974 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b08:	b9ab      	cbnz	r3, 8000b36 <HAL_RCC_OscConfig+0x246>
 8000b0a:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b0c:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b10:	f023 0301 	bic.w	r3, r3, #1
 8000b14:	6223      	str	r3, [r4, #32]
 8000b16:	6a23      	ldr	r3, [r4, #32]
 8000b18:	f023 0304 	bic.w	r3, r3, #4
 8000b1c:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000b1e:	f7ff fb57 	bl	80001d0 <HAL_GetTick>
 8000b22:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b24:	6a23      	ldr	r3, [r4, #32]
 8000b26:	0798      	lsls	r0, r3, #30
 8000b28:	d5d3      	bpl.n	8000ad2 <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b2a:	f7ff fb51 	bl	80001d0 <HAL_GetTick>
 8000b2e:	1b80      	subs	r0, r0, r6
 8000b30:	4540      	cmp	r0, r8
 8000b32:	d9f7      	bls.n	8000b24 <HAL_RCC_OscConfig+0x234>
 8000b34:	e71e      	b.n	8000974 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b36:	2b05      	cmp	r3, #5
 8000b38:	6a23      	ldr	r3, [r4, #32]
 8000b3a:	d103      	bne.n	8000b44 <HAL_RCC_OscConfig+0x254>
 8000b3c:	f043 0304 	orr.w	r3, r3, #4
 8000b40:	6223      	str	r3, [r4, #32]
 8000b42:	e7ba      	b.n	8000aba <HAL_RCC_OscConfig+0x1ca>
 8000b44:	f023 0301 	bic.w	r3, r3, #1
 8000b48:	6223      	str	r3, [r4, #32]
 8000b4a:	6a23      	ldr	r3, [r4, #32]
 8000b4c:	f023 0304 	bic.w	r3, r3, #4
 8000b50:	e7b6      	b.n	8000ac0 <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b52:	f7ff fb3d 	bl	80001d0 <HAL_GetTick>
 8000b56:	eba0 0008 	sub.w	r0, r0, r8
 8000b5a:	42b0      	cmp	r0, r6
 8000b5c:	d9b6      	bls.n	8000acc <HAL_RCC_OscConfig+0x1dc>
 8000b5e:	e709      	b.n	8000974 <HAL_RCC_OscConfig+0x84>
 8000b60:	40021000 	.word	0x40021000
 8000b64:	42420000 	.word	0x42420000
 8000b68:	42420480 	.word	0x42420480
 8000b6c:	20000010 	.word	0x20000010
 8000b70:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000b74:	4c22      	ldr	r4, [pc, #136]	; (8000c00 <HAL_RCC_OscConfig+0x310>)
 8000b76:	6863      	ldr	r3, [r4, #4]
 8000b78:	f003 030c 	and.w	r3, r3, #12
 8000b7c:	2b08      	cmp	r3, #8
 8000b7e:	f43f aee2 	beq.w	8000946 <HAL_RCC_OscConfig+0x56>
 8000b82:	2300      	movs	r3, #0
 8000b84:	4e1f      	ldr	r6, [pc, #124]	; (8000c04 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b86:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000b88:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b8a:	d12b      	bne.n	8000be4 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8000b8c:	f7ff fb20 	bl	80001d0 <HAL_GetTick>
 8000b90:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000b92:	6823      	ldr	r3, [r4, #0]
 8000b94:	0199      	lsls	r1, r3, #6
 8000b96:	d41f      	bmi.n	8000bd8 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000b98:	6a2b      	ldr	r3, [r5, #32]
 8000b9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b9e:	d105      	bne.n	8000bac <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000ba0:	6862      	ldr	r2, [r4, #4]
 8000ba2:	68a9      	ldr	r1, [r5, #8]
 8000ba4:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8000ba8:	430a      	orrs	r2, r1
 8000baa:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000bac:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000bae:	6862      	ldr	r2, [r4, #4]
 8000bb0:	430b      	orrs	r3, r1
 8000bb2:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8000bb6:	4313      	orrs	r3, r2
 8000bb8:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8000bba:	2301      	movs	r3, #1
 8000bbc:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000bbe:	f7ff fb07 	bl	80001d0 <HAL_GetTick>
 8000bc2:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000bc4:	6823      	ldr	r3, [r4, #0]
 8000bc6:	019a      	lsls	r2, r3, #6
 8000bc8:	f53f aea7 	bmi.w	800091a <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000bcc:	f7ff fb00 	bl	80001d0 <HAL_GetTick>
 8000bd0:	1b40      	subs	r0, r0, r5
 8000bd2:	2802      	cmp	r0, #2
 8000bd4:	d9f6      	bls.n	8000bc4 <HAL_RCC_OscConfig+0x2d4>
 8000bd6:	e6cd      	b.n	8000974 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000bd8:	f7ff fafa 	bl	80001d0 <HAL_GetTick>
 8000bdc:	1bc0      	subs	r0, r0, r7
 8000bde:	2802      	cmp	r0, #2
 8000be0:	d9d7      	bls.n	8000b92 <HAL_RCC_OscConfig+0x2a2>
 8000be2:	e6c7      	b.n	8000974 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8000be4:	f7ff faf4 	bl	80001d0 <HAL_GetTick>
 8000be8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000bea:	6823      	ldr	r3, [r4, #0]
 8000bec:	019b      	lsls	r3, r3, #6
 8000bee:	f57f ae94 	bpl.w	800091a <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000bf2:	f7ff faed 	bl	80001d0 <HAL_GetTick>
 8000bf6:	1b40      	subs	r0, r0, r5
 8000bf8:	2802      	cmp	r0, #2
 8000bfa:	d9f6      	bls.n	8000bea <HAL_RCC_OscConfig+0x2fa>
 8000bfc:	e6ba      	b.n	8000974 <HAL_RCC_OscConfig+0x84>
 8000bfe:	bf00      	nop
 8000c00:	40021000 	.word	0x40021000
 8000c04:	42420060 	.word	0x42420060

08000c08 <HAL_RCC_GetSysClockFreq>:
{
 8000c08:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000c0a:	4b19      	ldr	r3, [pc, #100]	; (8000c70 <HAL_RCC_GetSysClockFreq+0x68>)
{
 8000c0c:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000c0e:	ac02      	add	r4, sp, #8
 8000c10:	f103 0510 	add.w	r5, r3, #16
 8000c14:	4622      	mov	r2, r4
 8000c16:	6818      	ldr	r0, [r3, #0]
 8000c18:	6859      	ldr	r1, [r3, #4]
 8000c1a:	3308      	adds	r3, #8
 8000c1c:	c203      	stmia	r2!, {r0, r1}
 8000c1e:	42ab      	cmp	r3, r5
 8000c20:	4614      	mov	r4, r2
 8000c22:	d1f7      	bne.n	8000c14 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000c24:	2301      	movs	r3, #1
 8000c26:	f88d 3004 	strb.w	r3, [sp, #4]
 8000c2a:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8000c2c:	4911      	ldr	r1, [pc, #68]	; (8000c74 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000c2e:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8000c32:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000c34:	f003 020c 	and.w	r2, r3, #12
 8000c38:	2a08      	cmp	r2, #8
 8000c3a:	d117      	bne.n	8000c6c <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000c3c:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8000c40:	a806      	add	r0, sp, #24
 8000c42:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000c44:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000c46:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000c4a:	d50c      	bpl.n	8000c66 <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000c4c:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000c4e:	480a      	ldr	r0, [pc, #40]	; (8000c78 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000c50:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000c54:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000c56:	aa06      	add	r2, sp, #24
 8000c58:	4413      	add	r3, r2
 8000c5a:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000c5e:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8000c62:	b007      	add	sp, #28
 8000c64:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000c66:	4805      	ldr	r0, [pc, #20]	; (8000c7c <HAL_RCC_GetSysClockFreq+0x74>)
 8000c68:	4350      	muls	r0, r2
 8000c6a:	e7fa      	b.n	8000c62 <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8000c6c:	4802      	ldr	r0, [pc, #8]	; (8000c78 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 8000c6e:	e7f8      	b.n	8000c62 <HAL_RCC_GetSysClockFreq+0x5a>
 8000c70:	0800165c 	.word	0x0800165c
 8000c74:	40021000 	.word	0x40021000
 8000c78:	007a1200 	.word	0x007a1200
 8000c7c:	003d0900 	.word	0x003d0900

08000c80 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000c80:	4a4d      	ldr	r2, [pc, #308]	; (8000db8 <HAL_RCC_ClockConfig+0x138>)
{
 8000c82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000c86:	6813      	ldr	r3, [r2, #0]
{
 8000c88:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000c8a:	f003 0307 	and.w	r3, r3, #7
 8000c8e:	428b      	cmp	r3, r1
{
 8000c90:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000c92:	d328      	bcc.n	8000ce6 <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000c94:	682a      	ldr	r2, [r5, #0]
 8000c96:	0791      	lsls	r1, r2, #30
 8000c98:	d432      	bmi.n	8000d00 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000c9a:	07d2      	lsls	r2, r2, #31
 8000c9c:	d438      	bmi.n	8000d10 <HAL_RCC_ClockConfig+0x90>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000c9e:	4a46      	ldr	r2, [pc, #280]	; (8000db8 <HAL_RCC_ClockConfig+0x138>)
 8000ca0:	6813      	ldr	r3, [r2, #0]
 8000ca2:	f003 0307 	and.w	r3, r3, #7
 8000ca6:	429e      	cmp	r6, r3
 8000ca8:	d373      	bcc.n	8000d92 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000caa:	682a      	ldr	r2, [r5, #0]
 8000cac:	4c43      	ldr	r4, [pc, #268]	; (8000dbc <HAL_RCC_ClockConfig+0x13c>)
 8000cae:	f012 0f04 	tst.w	r2, #4
 8000cb2:	d179      	bne.n	8000da8 <HAL_RCC_ClockConfig+0x128>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000cb4:	0713      	lsls	r3, r2, #28
 8000cb6:	d506      	bpl.n	8000cc6 <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000cb8:	6863      	ldr	r3, [r4, #4]
 8000cba:	692a      	ldr	r2, [r5, #16]
 8000cbc:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000cc0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000cc4:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000cc6:	f7ff ff9f 	bl	8000c08 <HAL_RCC_GetSysClockFreq>
 8000cca:	6863      	ldr	r3, [r4, #4]
 8000ccc:	4a3c      	ldr	r2, [pc, #240]	; (8000dc0 <HAL_RCC_ClockConfig+0x140>)
 8000cce:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000cd2:	5cd3      	ldrb	r3, [r2, r3]
 8000cd4:	40d8      	lsrs	r0, r3
 8000cd6:	4b3b      	ldr	r3, [pc, #236]	; (8000dc4 <HAL_RCC_ClockConfig+0x144>)
 8000cd8:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000cda:	2000      	movs	r0, #0
 8000cdc:	f7ff fa36 	bl	800014c <HAL_InitTick>
  return HAL_OK;
 8000ce0:	2000      	movs	r0, #0
}
 8000ce2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ce6:	6813      	ldr	r3, [r2, #0]
 8000ce8:	f023 0307 	bic.w	r3, r3, #7
 8000cec:	430b      	orrs	r3, r1
 8000cee:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000cf0:	6813      	ldr	r3, [r2, #0]
 8000cf2:	f003 0307 	and.w	r3, r3, #7
 8000cf6:	4299      	cmp	r1, r3
 8000cf8:	d0cc      	beq.n	8000c94 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8000cfa:	2001      	movs	r0, #1
 8000cfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000d00:	492e      	ldr	r1, [pc, #184]	; (8000dbc <HAL_RCC_ClockConfig+0x13c>)
 8000d02:	68a8      	ldr	r0, [r5, #8]
 8000d04:	684b      	ldr	r3, [r1, #4]
 8000d06:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000d0a:	4303      	orrs	r3, r0
 8000d0c:	604b      	str	r3, [r1, #4]
 8000d0e:	e7c4      	b.n	8000c9a <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d10:	686a      	ldr	r2, [r5, #4]
 8000d12:	4c2a      	ldr	r4, [pc, #168]	; (8000dbc <HAL_RCC_ClockConfig+0x13c>)
 8000d14:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d16:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d18:	d11c      	bne.n	8000d54 <HAL_RCC_ClockConfig+0xd4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d1a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d1e:	d0ec      	beq.n	8000cfa <HAL_RCC_ClockConfig+0x7a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000d20:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d22:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000d26:	f023 0303 	bic.w	r3, r3, #3
 8000d2a:	4313      	orrs	r3, r2
 8000d2c:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8000d2e:	f7ff fa4f 	bl	80001d0 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d32:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8000d34:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d36:	2b01      	cmp	r3, #1
 8000d38:	d114      	bne.n	8000d64 <HAL_RCC_ClockConfig+0xe4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d3a:	6863      	ldr	r3, [r4, #4]
 8000d3c:	f003 030c 	and.w	r3, r3, #12
 8000d40:	2b04      	cmp	r3, #4
 8000d42:	d0ac      	beq.n	8000c9e <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d44:	f7ff fa44 	bl	80001d0 <HAL_GetTick>
 8000d48:	1bc0      	subs	r0, r0, r7
 8000d4a:	4540      	cmp	r0, r8
 8000d4c:	d9f5      	bls.n	8000d3a <HAL_RCC_ClockConfig+0xba>
          return HAL_TIMEOUT;
 8000d4e:	2003      	movs	r0, #3
 8000d50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000d54:	2a02      	cmp	r2, #2
 8000d56:	d102      	bne.n	8000d5e <HAL_RCC_ClockConfig+0xde>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d58:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000d5c:	e7df      	b.n	8000d1e <HAL_RCC_ClockConfig+0x9e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d5e:	f013 0f02 	tst.w	r3, #2
 8000d62:	e7dc      	b.n	8000d1e <HAL_RCC_ClockConfig+0x9e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000d64:	2b02      	cmp	r3, #2
 8000d66:	d10f      	bne.n	8000d88 <HAL_RCC_ClockConfig+0x108>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000d68:	6863      	ldr	r3, [r4, #4]
 8000d6a:	f003 030c 	and.w	r3, r3, #12
 8000d6e:	2b08      	cmp	r3, #8
 8000d70:	d095      	beq.n	8000c9e <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d72:	f7ff fa2d 	bl	80001d0 <HAL_GetTick>
 8000d76:	1bc0      	subs	r0, r0, r7
 8000d78:	4540      	cmp	r0, r8
 8000d7a:	d9f5      	bls.n	8000d68 <HAL_RCC_ClockConfig+0xe8>
 8000d7c:	e7e7      	b.n	8000d4e <HAL_RCC_ClockConfig+0xce>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d7e:	f7ff fa27 	bl	80001d0 <HAL_GetTick>
 8000d82:	1bc0      	subs	r0, r0, r7
 8000d84:	4540      	cmp	r0, r8
 8000d86:	d8e2      	bhi.n	8000d4e <HAL_RCC_ClockConfig+0xce>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000d88:	6863      	ldr	r3, [r4, #4]
 8000d8a:	f013 0f0c 	tst.w	r3, #12
 8000d8e:	d1f6      	bne.n	8000d7e <HAL_RCC_ClockConfig+0xfe>
 8000d90:	e785      	b.n	8000c9e <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d92:	6813      	ldr	r3, [r2, #0]
 8000d94:	f023 0307 	bic.w	r3, r3, #7
 8000d98:	4333      	orrs	r3, r6
 8000d9a:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000d9c:	6813      	ldr	r3, [r2, #0]
 8000d9e:	f003 0307 	and.w	r3, r3, #7
 8000da2:	429e      	cmp	r6, r3
 8000da4:	d1a9      	bne.n	8000cfa <HAL_RCC_ClockConfig+0x7a>
 8000da6:	e780      	b.n	8000caa <HAL_RCC_ClockConfig+0x2a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000da8:	6863      	ldr	r3, [r4, #4]
 8000daa:	68e9      	ldr	r1, [r5, #12]
 8000dac:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000db0:	430b      	orrs	r3, r1
 8000db2:	6063      	str	r3, [r4, #4]
 8000db4:	e77e      	b.n	8000cb4 <HAL_RCC_ClockConfig+0x34>
 8000db6:	bf00      	nop
 8000db8:	40022000 	.word	0x40022000
 8000dbc:	40021000 	.word	0x40021000
 8000dc0:	080023fd 	.word	0x080023fd
 8000dc4:	20000010 	.word	0x20000010

08000dc8 <HAL_RCC_GetHCLKFreq>:
}
 8000dc8:	4b01      	ldr	r3, [pc, #4]	; (8000dd0 <HAL_RCC_GetHCLKFreq+0x8>)
 8000dca:	6818      	ldr	r0, [r3, #0]
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	20000010 	.word	0x20000010

08000dd4 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000dd4:	4b04      	ldr	r3, [pc, #16]	; (8000de8 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000dd6:	4a05      	ldr	r2, [pc, #20]	; (8000dec <HAL_RCC_GetPCLK1Freq+0x18>)
 8000dd8:	685b      	ldr	r3, [r3, #4]
 8000dda:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8000dde:	5cd3      	ldrb	r3, [r2, r3]
 8000de0:	4a03      	ldr	r2, [pc, #12]	; (8000df0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000de2:	6810      	ldr	r0, [r2, #0]
}    
 8000de4:	40d8      	lsrs	r0, r3
 8000de6:	4770      	bx	lr
 8000de8:	40021000 	.word	0x40021000
 8000dec:	0800240d 	.word	0x0800240d
 8000df0:	20000010 	.word	0x20000010

08000df4 <Button_Attach>:
	//init GPIOs as input

	GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE()
 8000df4:	4b27      	ldr	r3, [pc, #156]	; (8000e94 <Button_Attach+0xa0>)
{
 8000df6:	b510      	push	{r4, lr}
	__HAL_RCC_GPIOC_CLK_ENABLE()
 8000df8:	699a      	ldr	r2, [r3, #24]
{
 8000dfa:	b088      	sub	sp, #32
	__HAL_RCC_GPIOC_CLK_ENABLE()
 8000dfc:	f042 0210 	orr.w	r2, r2, #16
 8000e00:	619a      	str	r2, [r3, #24]
 8000e02:	699a      	ldr	r2, [r3, #24]
{
 8000e04:	4604      	mov	r4, r0
	__HAL_RCC_GPIOC_CLK_ENABLE()
 8000e06:	f002 0210 	and.w	r2, r2, #16
 8000e0a:	9200      	str	r2, [sp, #0]
 8000e0c:	9a00      	ldr	r2, [sp, #0]
	;
	__HAL_RCC_GPIOD_CLK_ENABLE()
 8000e0e:	699a      	ldr	r2, [r3, #24]
 8000e10:	f042 0220 	orr.w	r2, r2, #32
 8000e14:	619a      	str	r2, [r3, #24]
 8000e16:	699a      	ldr	r2, [r3, #24]
 8000e18:	f002 0220 	and.w	r2, r2, #32
 8000e1c:	9201      	str	r2, [sp, #4]
 8000e1e:	9a01      	ldr	r2, [sp, #4]
	;
	__HAL_RCC_GPIOA_CLK_ENABLE()
 8000e20:	699a      	ldr	r2, [r3, #24]
 8000e22:	f042 0204 	orr.w	r2, r2, #4
 8000e26:	619a      	str	r2, [r3, #24]
 8000e28:	699a      	ldr	r2, [r3, #24]
 8000e2a:	f002 0204 	and.w	r2, r2, #4
 8000e2e:	9202      	str	r2, [sp, #8]
 8000e30:	9a02      	ldr	r2, [sp, #8]
	;
	__HAL_RCC_GPIOB_CLK_ENABLE()
 8000e32:	699a      	ldr	r2, [r3, #24]
 8000e34:	f042 0208 	orr.w	r2, r2, #8
 8000e38:	619a      	str	r2, [r3, #24]
 8000e3a:	699b      	ldr	r3, [r3, #24]
 8000e3c:	f003 0308 	and.w	r3, r3, #8
 8000e40:	9303      	str	r3, [sp, #12]
 8000e42:	9b03      	ldr	r3, [sp, #12]
	;

	GPIO_InitStruct.Pin = Button_Struct_PTR->Button_Pin;
 8000e44:	8803      	ldrh	r3, [r0, #0]
 8000e46:	9304      	str	r3, [sp, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	9305      	str	r3, [sp, #20]
	if (Button_Struct_PTR->Button_Pressed_Logic == LOW)
 8000e4c:	7a03      	ldrb	r3, [r0, #8]
 8000e4e:	b9f3      	cbnz	r3, 8000e8e <Button_Attach+0x9a>
	{
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e50:	2301      	movs	r3, #1
	}
	else
	{
		GPIO_InitStruct.Pull = GPIO_PULLDOWN;
	}
	HAL_GPIO_Init(Button_Struct_PTR->Button_Pin_Port, &GPIO_InitStruct);
 8000e52:	a904      	add	r1, sp, #16
 8000e54:	6860      	ldr	r0, [r4, #4]
		GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e56:	9306      	str	r3, [sp, #24]
	HAL_GPIO_Init(Button_Struct_PTR->Button_Pin_Port, &GPIO_InitStruct);
 8000e58:	f7ff fa2c 	bl	80002b4 <HAL_GPIO_Init>

	Button_Struct_PTR->Button_Clicked_Count = 0;
 8000e5c:	2300      	movs	r3, #0
	Button_Struct_PTR->Button_Event = Button_Idle;
	Button_Struct_PTR->Button_Pressed_Ticks = 0;
	Button_Struct_PTR->Button_Released_Ticks = 0;

	Button_Struct_PTR_Array[Attached_Buttons] = Button_Struct_PTR;
 8000e5e:	4a0e      	ldr	r2, [pc, #56]	; (8000e98 <Button_Attach+0xa4>)
	Button_Struct_PTR->Button_Clicked_Count = 0;
 8000e60:	7523      	strb	r3, [r4, #20]
	Button_Struct_PTR->Button_Event = Button_Idle;
 8000e62:	7263      	strb	r3, [r4, #9]
	Button_Struct_PTR->Button_Pressed_Ticks = 0;
 8000e64:	60e3      	str	r3, [r4, #12]
	Button_Struct_PTR->Button_Released_Ticks = 0;
 8000e66:	6123      	str	r3, [r4, #16]
	Button_Struct_PTR_Array[Attached_Buttons] = Button_Struct_PTR;
 8000e68:	490c      	ldr	r1, [pc, #48]	; (8000e9c <Button_Attach+0xa8>)
 8000e6a:	7813      	ldrb	r3, [r2, #0]
 8000e6c:	f841 4023 	str.w	r4, [r1, r3, lsl #2]

	Attached_Buttons++;
 8000e70:	3301      	adds	r3, #1
 8000e72:	b2db      	uxtb	r3, r3

	if (Attached_Buttons > MAX_BUTTONS)
 8000e74:	2b14      	cmp	r3, #20
	Attached_Buttons++;
 8000e76:	7013      	strb	r3, [r2, #0]
 8000e78:	4614      	mov	r4, r2
	if (Attached_Buttons > MAX_BUTTONS)
 8000e7a:	d903      	bls.n	8000e84 <Button_Attach+0x90>
	{
		_Error_Handler(__FILE__, __LINE__);
 8000e7c:	2141      	movs	r1, #65	; 0x41
 8000e7e:	4808      	ldr	r0, [pc, #32]	; (8000ea0 <Button_Attach+0xac>)
 8000e80:	f000 f978 	bl	8001174 <_Error_Handler>
		//Error
	}
	return (Attached_Buttons - 1);//return button ID
 8000e84:	7820      	ldrb	r0, [r4, #0]
 8000e86:	3801      	subs	r0, #1
}
 8000e88:	b2c0      	uxtb	r0, r0
 8000e8a:	b008      	add	sp, #32
 8000e8c:	bd10      	pop	{r4, pc}
		GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e8e:	2302      	movs	r3, #2
 8000e90:	e7df      	b.n	8000e52 <Button_Attach+0x5e>
 8000e92:	bf00      	nop
 8000e94:	40021000 	.word	0x40021000
 8000e98:	20000030 	.word	0x20000030
 8000e9c:	20000038 	.word	0x20000038
 8000ea0:	0800166c 	.word	0x0800166c

08000ea4 <Button_Scan>:
 * should be called at least every 20ms?
 *
 *
 */
void Button_Scan()
{
 8000ea4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	static volatile uint32_t Button_Scan_Time_Stamp = 0;
	Button_Struct_t *PTR = NULL;

	if (HAL_GetTick() - Button_Scan_Time_Stamp > (BUTTON_SCAN_TICK - 1)) // excute this loop on every BUTTON_SCAN_TICK
 8000ea8:	f7ff f992 	bl	80001d0 <HAL_GetTick>
 8000eac:	4c27      	ldr	r4, [pc, #156]	; (8000f4c <Button_Scan+0xa8>)
 8000eae:	6823      	ldr	r3, [r4, #0]
 8000eb0:	1ac0      	subs	r0, r0, r3
 8000eb2:	2804      	cmp	r0, #4
 8000eb4:	d90b      	bls.n	8000ece <Button_Scan+0x2a>
	{
		Button_Scan_Time_Stamp = HAL_GetTick();

		for (uint8_t Index = 0; Index < Attached_Buttons; Index++)
 8000eb6:	2600      	movs	r6, #0
		Button_Scan_Time_Stamp = HAL_GetTick();
 8000eb8:	f7ff f98a 	bl	80001d0 <HAL_GetTick>
					if (PTR->Callback != NULL
							&& PTR->Button_Event != Button_Idle)
					{
						PTR->Callback(
								PTR->Button_Clicked_Count);
						PTR->Button_Clicked_Count = 0;
 8000ebc:	4635      	mov	r5, r6
		for (uint8_t Index = 0; Index < Attached_Buttons; Index++)
 8000ebe:	4f24      	ldr	r7, [pc, #144]	; (8000f50 <Button_Scan+0xac>)
			PTR = Button_Struct_PTR_Array[Index];
 8000ec0:	f8df 8090 	ldr.w	r8, [pc, #144]	; 8000f54 <Button_Scan+0xb0>
		Button_Scan_Time_Stamp = HAL_GetTick();
 8000ec4:	6020      	str	r0, [r4, #0]
		for (uint8_t Index = 0; Index < Attached_Buttons; Index++)
 8000ec6:	783a      	ldrb	r2, [r7, #0]
 8000ec8:	b2f3      	uxtb	r3, r6
 8000eca:	429a      	cmp	r2, r3
 8000ecc:	d801      	bhi.n	8000ed2 <Button_Scan+0x2e>
 8000ece:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			PTR = Button_Struct_PTR_Array[Index];
 8000ed2:	f858 4023 	ldr.w	r4, [r8, r3, lsl #2]
			if (HAL_GPIO_ReadPin(PTR->Button_Pin_Port,
 8000ed6:	8821      	ldrh	r1, [r4, #0]
 8000ed8:	6860      	ldr	r0, [r4, #4]
 8000eda:	f7ff facb 	bl	8000474 <HAL_GPIO_ReadPin>
 8000ede:	7a23      	ldrb	r3, [r4, #8]
 8000ee0:	4283      	cmp	r3, r0
 8000ee2:	68e3      	ldr	r3, [r4, #12]
 8000ee4:	d117      	bne.n	8000f16 <Button_Scan+0x72>
				PTR->Button_Pressed_Ticks++;	//
 8000ee6:	3301      	adds	r3, #1
				if (PTR->Button_Pressed_Ticks
 8000ee8:	2bc7      	cmp	r3, #199	; 0xc7
				PTR->Button_Pressed_Ticks++;	//
 8000eea:	60e3      	str	r3, [r4, #12]
				if (PTR->Button_Pressed_Ticks
 8000eec:	d808      	bhi.n	8000f00 <Button_Scan+0x5c>
					if (PTR->Button_Released_Ticks //repressed detected
 8000eee:	6923      	ldr	r3, [r4, #16]
					PTR->Button_Released_Ticks = 0;
 8000ef0:	6125      	str	r5, [r4, #16]
					if (PTR->Button_Released_Ticks //repressed detected
 8000ef2:	2b13      	cmp	r3, #19
						PTR->Button_Event = Button_Repressed;
 8000ef4:	bf94      	ite	ls
 8000ef6:	2302      	movls	r3, #2
						PTR->Button_Event = Button_Pressed;
 8000ef8:	2301      	movhi	r3, #1
 8000efa:	7263      	strb	r3, [r4, #9]
 8000efc:	3601      	adds	r6, #1
 8000efe:	e7e2      	b.n	8000ec6 <Button_Scan+0x22>
					PTR->Button_Event = Button_Long_Pressed;
 8000f00:	2303      	movs	r3, #3
					PTR->Button_Clicked_Count = 0xFF; //0xFF for long press
 8000f02:	20ff      	movs	r0, #255	; 0xff
					PTR->Button_Event = Button_Long_Pressed;
 8000f04:	7263      	strb	r3, [r4, #9]
					if (PTR->Callback != NULL)
 8000f06:	69a3      	ldr	r3, [r4, #24]
					PTR->Button_Clicked_Count = 0xFF; //0xFF for long press
 8000f08:	7520      	strb	r0, [r4, #20]
					if (PTR->Callback != NULL)
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d0f6      	beq.n	8000efc <Button_Scan+0x58>
						PTR->Callback(
 8000f0e:	4798      	blx	r3
						PTR->Button_Clicked_Count = 0;
 8000f10:	7525      	strb	r5, [r4, #20]
						PTR->Button_Event = Button_Idle;
 8000f12:	7265      	strb	r5, [r4, #9]
 8000f14:	e7f2      	b.n	8000efc <Button_Scan+0x58>
				PTR->Button_Released_Ticks++;
 8000f16:	6922      	ldr	r2, [r4, #16]
				if (PTR->Button_Pressed_Ticks
 8000f18:	2b0a      	cmp	r3, #10
				PTR->Button_Released_Ticks++;
 8000f1a:	f102 0201 	add.w	r2, r2, #1
 8000f1e:	6122      	str	r2, [r4, #16]
				if (PTR->Button_Pressed_Ticks
 8000f20:	d909      	bls.n	8000f36 <Button_Scan+0x92>
					if (PTR->Button_Event == Button_Repressed)
 8000f22:	7a63      	ldrb	r3, [r4, #9]
					PTR->Button_Pressed_Ticks = 0;
 8000f24:	60e5      	str	r5, [r4, #12]
					if (PTR->Button_Event == Button_Repressed)
 8000f26:	2b02      	cmp	r3, #2
 8000f28:	d103      	bne.n	8000f32 <Button_Scan+0x8e>
						PTR->Button_Clicked_Count++;
 8000f2a:	7d23      	ldrb	r3, [r4, #20]
 8000f2c:	3301      	adds	r3, #1
						PTR->Button_Clicked_Count = 1;
 8000f2e:	7523      	strb	r3, [r4, #20]
 8000f30:	e001      	b.n	8000f36 <Button_Scan+0x92>
					else if (PTR->Button_Event
 8000f32:	2b01      	cmp	r3, #1
 8000f34:	d0fb      	beq.n	8000f2e <Button_Scan+0x8a>
				if (PTR->Button_Released_Ticks
 8000f36:	2a28      	cmp	r2, #40	; 0x28
 8000f38:	d9e0      	bls.n	8000efc <Button_Scan+0x58>
					if (PTR->Callback != NULL
 8000f3a:	69a3      	ldr	r3, [r4, #24]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d0dd      	beq.n	8000efc <Button_Scan+0x58>
							&& PTR->Button_Event != Button_Idle)
 8000f40:	7a62      	ldrb	r2, [r4, #9]
 8000f42:	2a00      	cmp	r2, #0
 8000f44:	d0da      	beq.n	8000efc <Button_Scan+0x58>
						PTR->Callback(
 8000f46:	7d20      	ldrb	r0, [r4, #20]
 8000f48:	e7e1      	b.n	8000f0e <Button_Scan+0x6a>
 8000f4a:	bf00      	nop
 8000f4c:	20000034 	.word	0x20000034
 8000f50:	20000030 	.word	0x20000030
 8000f54:	20000038 	.word	0x20000038

08000f58 <MX_GPIO_Init>:
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f58:	4b19      	ldr	r3, [pc, #100]	; (8000fc0 <MX_GPIO_Init+0x68>)
{
 8000f5a:	b500      	push	{lr}
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f5c:	699a      	ldr	r2, [r3, #24]
{
 8000f5e:	b089      	sub	sp, #36	; 0x24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f60:	f042 0210 	orr.w	r2, r2, #16
 8000f64:	619a      	str	r2, [r3, #24]
 8000f66:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = My_Button_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(My_Button_GPIO_Port, &GPIO_InitStruct);
 8000f68:	a904      	add	r1, sp, #16
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f6a:	f002 0210 	and.w	r2, r2, #16
 8000f6e:	9200      	str	r2, [sp, #0]
 8000f70:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f72:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_Init(My_Button_GPIO_Port, &GPIO_InitStruct);
 8000f74:	4813      	ldr	r0, [pc, #76]	; (8000fc4 <MX_GPIO_Init+0x6c>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f76:	f042 0220 	orr.w	r2, r2, #32
 8000f7a:	619a      	str	r2, [r3, #24]
 8000f7c:	699a      	ldr	r2, [r3, #24]
 8000f7e:	f002 0220 	and.w	r2, r2, #32
 8000f82:	9201      	str	r2, [sp, #4]
 8000f84:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f86:	699a      	ldr	r2, [r3, #24]
 8000f88:	f042 0204 	orr.w	r2, r2, #4
 8000f8c:	619a      	str	r2, [r3, #24]
 8000f8e:	699a      	ldr	r2, [r3, #24]
 8000f90:	f002 0204 	and.w	r2, r2, #4
 8000f94:	9202      	str	r2, [sp, #8]
 8000f96:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f98:	699a      	ldr	r2, [r3, #24]
 8000f9a:	f042 0208 	orr.w	r2, r2, #8
 8000f9e:	619a      	str	r2, [r3, #24]
 8000fa0:	699b      	ldr	r3, [r3, #24]
 8000fa2:	f003 0308 	and.w	r3, r3, #8
 8000fa6:	9303      	str	r3, [sp, #12]
 8000fa8:	9b03      	ldr	r3, [sp, #12]
  GPIO_InitStruct.Pin = My_Button_Pin;
 8000faa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fae:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb4:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(My_Button_GPIO_Port, &GPIO_InitStruct);
 8000fb6:	f7ff f97d 	bl	80002b4 <HAL_GPIO_Init>

}
 8000fba:	b009      	add	sp, #36	; 0x24
 8000fbc:	f85d fb04 	ldr.w	pc, [sp], #4
 8000fc0:	40021000 	.word	0x40021000
 8000fc4:	40010c00 	.word	0x40010c00

08000fc8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000fc8:	b508      	push	{r3, lr}

  hi2c1.Instance = I2C1;
 8000fca:	480d      	ldr	r0, [pc, #52]	; (8001000 <MX_I2C1_Init+0x38>)
  hi2c1.Init.ClockSpeed = 100000;
 8000fcc:	4b0d      	ldr	r3, [pc, #52]	; (8001004 <MX_I2C1_Init+0x3c>)
 8000fce:	f8df e03c 	ldr.w	lr, [pc, #60]	; 800100c <MX_I2C1_Init+0x44>
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fd2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c1.Init.ClockSpeed = 100000;
 8000fd6:	e880 4008 	stmia.w	r0, {r3, lr}
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000fda:	2300      	movs	r3, #0
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fdc:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000fde:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000fe0:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fe2:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000fe4:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fe6:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fe8:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fea:	f7ff fb6b 	bl	80006c4 <HAL_I2C_Init>
 8000fee:	b128      	cbz	r0, 8000ffc <MX_I2C1_Init+0x34>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

}
 8000ff0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8000ff4:	2142      	movs	r1, #66	; 0x42
 8000ff6:	4804      	ldr	r0, [pc, #16]	; (8001008 <MX_I2C1_Init+0x40>)
 8000ff8:	f000 b8bc 	b.w	8001174 <_Error_Handler>
 8000ffc:	bd08      	pop	{r3, pc}
 8000ffe:	bf00      	nop
 8001000:	20000494 	.word	0x20000494
 8001004:	40005400 	.word	0x40005400
 8001008:	080023d8 	.word	0x080023d8
 800100c:	000186a0 	.word	0x000186a0

08001010 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001010:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(i2cHandle->Instance==I2C1)
 8001012:	6802      	ldr	r2, [r0, #0]
 8001014:	4b0c      	ldr	r3, [pc, #48]	; (8001048 <HAL_I2C_MspInit+0x38>)
 8001016:	429a      	cmp	r2, r3
 8001018:	d113      	bne.n	8001042 <HAL_I2C_MspInit+0x32>
  
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800101a:	23c0      	movs	r3, #192	; 0xc0
 800101c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800101e:	2312      	movs	r3, #18
 8001020:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001022:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001024:	a902      	add	r1, sp, #8
 8001026:	4809      	ldr	r0, [pc, #36]	; (800104c <HAL_I2C_MspInit+0x3c>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001028:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800102a:	f7ff f943 	bl	80002b4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800102e:	4b08      	ldr	r3, [pc, #32]	; (8001050 <HAL_I2C_MspInit+0x40>)
 8001030:	69da      	ldr	r2, [r3, #28]
 8001032:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8001036:	61da      	str	r2, [r3, #28]
 8001038:	69db      	ldr	r3, [r3, #28]
 800103a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800103e:	9301      	str	r3, [sp, #4]
 8001040:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001042:	b007      	add	sp, #28
 8001044:	f85d fb04 	ldr.w	pc, [sp], #4
 8001048:	40005400 	.word	0x40005400
 800104c:	40010c00 	.word	0x40010c00
 8001050:	40021000 	.word	0x40021000

08001054 <My_Button_X_Callback>:
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
}

/* USER CODE BEGIN 4 */
void My_Button_X_Callback(uint8_t Clicked_Count)
{
 8001054:	b513      	push	{r0, r1, r4, lr}
 8001056:	4604      	mov	r4, r0
    //upto 254 clicked
    if(Clicked_Count==0xFF)	//long pressed
    {

    }
	ssd1306_SetCursor(0, 30);
 8001058:	211e      	movs	r1, #30
 800105a:	2000      	movs	r0, #0
 800105c:	f000 f9cc 	bl	80013f8 <ssd1306_SetCursor>
	itoa(Clicked_Count, temp, 10);
 8001060:	4620      	mov	r0, r4
	ssd1306_WriteString("BTN_X:", Font_11x18, White);
 8001062:	4c0a      	ldr	r4, [pc, #40]	; (800108c <My_Button_X_Callback+0x38>)
	itoa(Clicked_Count, temp, 10);
 8001064:	4669      	mov	r1, sp
 8001066:	220a      	movs	r2, #10
 8001068:	f000 faaa 	bl	80015c0 <itoa>
	ssd1306_WriteString("BTN_X:", Font_11x18, White);
 800106c:	e894 0006 	ldmia.w	r4, {r1, r2}
 8001070:	2301      	movs	r3, #1
 8001072:	4807      	ldr	r0, [pc, #28]	; (8001090 <My_Button_X_Callback+0x3c>)
 8001074:	f000 f9aa 	bl	80013cc <ssd1306_WriteString>
	ssd1306_WriteString(temp, Font_11x18, White);
 8001078:	e894 0006 	ldmia.w	r4, {r1, r2}
 800107c:	2301      	movs	r3, #1
 800107e:	4668      	mov	r0, sp
 8001080:	f000 f9a4 	bl	80013cc <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001084:	f000 f8a0 	bl	80011c8 <ssd1306_UpdateScreen>
}
 8001088:	b002      	add	sp, #8
 800108a:	bd10      	pop	{r4, pc}
 800108c:	20000008 	.word	0x20000008
 8001090:	080023e5 	.word	0x080023e5

08001094 <HAL_SYSTICK_Callback>:
	Button_Scan();
 8001094:	f7ff bf06 	b.w	8000ea4 <Button_Scan>

08001098 <SystemClock_Config>:
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001098:	f44f 3380 	mov.w	r3, #65536	; 0x10000
{
 800109c:	b510      	push	{r4, lr}
 800109e:	b090      	sub	sp, #64	; 0x40
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010a0:	2201      	movs	r2, #1
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010a2:	9307      	str	r3, [sp, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80010a4:	2100      	movs	r1, #0
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010a6:	2402      	movs	r4, #2
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010a8:	930e      	str	r3, [sp, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80010aa:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010ae:	a806      	add	r0, sp, #24
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010b0:	9206      	str	r2, [sp, #24]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80010b2:	9108      	str	r1, [sp, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010b4:	920a      	str	r2, [sp, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010b6:	940d      	str	r4, [sp, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80010b8:	930f      	str	r3, [sp, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010ba:	f7ff fc19 	bl	80008f0 <HAL_RCC_OscConfig>
 80010be:	b100      	cbz	r0, 80010c2 <SystemClock_Config+0x2a>
 80010c0:	e7fe      	b.n	80010c0 <SystemClock_Config+0x28>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80010c2:	230f      	movs	r3, #15
 80010c4:	9301      	str	r3, [sp, #4]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010ca:	9003      	str	r0, [sp, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010cc:	9005      	str	r0, [sp, #20]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010ce:	4621      	mov	r1, r4
 80010d0:	a801      	add	r0, sp, #4
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010d2:	9402      	str	r4, [sp, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010d4:	9304      	str	r3, [sp, #16]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010d6:	f7ff fdd3 	bl	8000c80 <HAL_RCC_ClockConfig>
 80010da:	4604      	mov	r4, r0
 80010dc:	b100      	cbz	r0, 80010e0 <SystemClock_Config+0x48>
 80010de:	e7fe      	b.n	80010de <SystemClock_Config+0x46>
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
 80010e0:	f7ff fe72 	bl	8000dc8 <HAL_RCC_GetHCLKFreq>
 80010e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010e8:	fbb0 f0f3 	udiv	r0, r0, r3
 80010ec:	f7ff f8bc 	bl	8000268 <HAL_SYSTICK_Config>
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80010f0:	2004      	movs	r0, #4
 80010f2:	f7ff f8cf 	bl	8000294 <HAL_SYSTICK_CLKSourceConfig>
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80010f6:	4622      	mov	r2, r4
 80010f8:	4621      	mov	r1, r4
 80010fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010fe:	f7ff f87f 	bl	8000200 <HAL_NVIC_SetPriority>
}
 8001102:	b010      	add	sp, #64	; 0x40
 8001104:	bd10      	pop	{r4, pc}
	...

08001108 <main>:
{
 8001108:	b500      	push	{lr}
 800110a:	b08f      	sub	sp, #60	; 0x3c
	HAL_Init();
 800110c:	f7ff f842 	bl	8000194 <HAL_Init>
	SystemClock_Config();
 8001110:	f7ff ffc2 	bl	8001098 <SystemClock_Config>
	MX_GPIO_Init();
 8001114:	f7ff ff20 	bl	8000f58 <MX_GPIO_Init>
	MX_I2C1_Init();
 8001118:	f7ff ff56 	bl	8000fc8 <MX_I2C1_Init>
	My_Button_X.Button_Pin = GPIO_PIN_9;
 800111c:	f44f 7300 	mov.w	r3, #512	; 0x200
	My_Button_X.Button_Pressed_Logic = LOW;
 8001120:	2400      	movs	r4, #0
	My_Button_X.Button_Pin = GPIO_PIN_9;
 8001122:	f8ad 3000 	strh.w	r3, [sp]
	My_Button_X.Callback = My_Button_X_Callback;
 8001126:	4d10      	ldr	r5, [pc, #64]	; (8001168 <main+0x60>)
	My_Button_X.Button_Pin_Port = GPIOB;
 8001128:	4b10      	ldr	r3, [pc, #64]	; (800116c <main+0x64>)
	Button_Attach(&My_Button_X);
 800112a:	4668      	mov	r0, sp
	My_Button_X.Button_Pin_Port = GPIOB;
 800112c:	9301      	str	r3, [sp, #4]
	My_Button_X.Button_Pressed_Logic = LOW;
 800112e:	f88d 4008 	strb.w	r4, [sp, #8]
	My_Button_X.Callback = My_Button_X_Callback;
 8001132:	9506      	str	r5, [sp, #24]
	Button_Attach(&My_Button_X);
 8001134:	f7ff fe5e 	bl	8000df4 <Button_Attach>
	My_Button_Y.Button_Pin = GPIO_PIN_5;
 8001138:	2320      	movs	r3, #32
 800113a:	f8ad 301c 	strh.w	r3, [sp, #28]
	My_Button_Y.Button_Pin_Port = GPIOA;
 800113e:	4b0c      	ldr	r3, [pc, #48]	; (8001170 <main+0x68>)
	Button_Attach(&My_Button_Y);
 8001140:	a807      	add	r0, sp, #28
	My_Button_Y.Button_Pin_Port = GPIOA;
 8001142:	9308      	str	r3, [sp, #32]
	My_Button_Y.Button_Pressed_Logic = HIGH;
 8001144:	2301      	movs	r3, #1
	My_Button_Y.Callback = My_Button_X_Callback;
 8001146:	950d      	str	r5, [sp, #52]	; 0x34
	My_Button_Y.Button_Pressed_Logic = HIGH;
 8001148:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	Button_Attach(&My_Button_Y);
 800114c:	f7ff fe52 	bl	8000df4 <Button_Attach>
	ssd1306_Init();
 8001150:	f000 f868 	bl	8001224 <ssd1306_Init>
	ssd1306_Fill(Black);
 8001154:	4620      	mov	r0, r4
 8001156:	f000 f829 	bl	80011ac <ssd1306_Fill>
	ssd1306_SetCursor(0, 0);
 800115a:	4621      	mov	r1, r4
 800115c:	4620      	mov	r0, r4
 800115e:	f000 f94b 	bl	80013f8 <ssd1306_SetCursor>
	ssd1306_UpdateScreen();
 8001162:	f000 f831 	bl	80011c8 <ssd1306_UpdateScreen>
 8001166:	e7fe      	b.n	8001166 <main+0x5e>
 8001168:	08001055 	.word	0x08001055
 800116c:	40010c00 	.word	0x40010c00
 8001170:	40010800 	.word	0x40010800

08001174 <_Error_Handler>:
 * @param  file: The file name as string.
 * @param  line: The line in file as a number.
 * @retval None
 */
void _Error_Handler(char *file, int line)
{
 8001174:	e7fe      	b.n	8001174 <_Error_Handler>
	...

08001178 <ssd1306_WriteCommand>:
//
//	Een byte sturen naar het commando register
//	Kan niet gebruikt worden buiten deze file
//
 void ssd1306_WriteCommand(uint8_t command)
{
 8001178:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	 HAL_StatusTypeDef status;
	 status=HAL_I2C_Mem_Write(&hi2c1,SSD1306_I2C_ADDR,0x00,1,&command,1,100);
 800117a:	2364      	movs	r3, #100	; 0x64
{
 800117c:	aa06      	add	r2, sp, #24
 800117e:	f802 0d01 	strb.w	r0, [r2, #-1]!
	 status=HAL_I2C_Mem_Write(&hi2c1,SSD1306_I2C_ADDR,0x00,1,&command,1,100);
 8001182:	9302      	str	r3, [sp, #8]
 8001184:	2301      	movs	r3, #1
 8001186:	2178      	movs	r1, #120	; 0x78
 8001188:	e88d 000c 	stmia.w	sp, {r2, r3}
 800118c:	4805      	ldr	r0, [pc, #20]	; (80011a4 <ssd1306_WriteCommand+0x2c>)
 800118e:	2200      	movs	r2, #0
 8001190:	f7ff fb18 	bl	80007c4 <HAL_I2C_Mem_Write>
	if(status!=HAL_OK)
 8001194:	b118      	cbz	r0, 800119e <ssd1306_WriteCommand+0x26>
	{
		Error_Handler();
 8001196:	2119      	movs	r1, #25
 8001198:	4803      	ldr	r0, [pc, #12]	; (80011a8 <ssd1306_WriteCommand+0x30>)
 800119a:	f7ff ffeb 	bl	8001174 <_Error_Handler>
	}
}
 800119e:	b007      	add	sp, #28
 80011a0:	f85d fb04 	ldr.w	pc, [sp], #4
 80011a4:	20000494 	.word	0x20000494
 80011a8:	080023ec 	.word	0x080023ec

080011ac <ssd1306_Fill>:
void ssd1306_Fill(SSD1306_COLOR color) 
{
	/* Set memory */
	uint32_t i;

	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 80011ac:	2300      	movs	r3, #0
	{
		SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80011ae:	4905      	ldr	r1, [pc, #20]	; (80011c4 <ssd1306_Fill+0x18>)
 80011b0:	1c02      	adds	r2, r0, #0
 80011b2:	bf18      	it	ne
 80011b4:	2201      	movne	r2, #1
 80011b6:	4252      	negs	r2, r2
 80011b8:	545a      	strb	r2, [r3, r1]
	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 80011ba:	3301      	adds	r3, #1
 80011bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011c0:	d1f6      	bne.n	80011b0 <ssd1306_Fill+0x4>
	}
}
 80011c2:	4770      	bx	lr
 80011c4:	2000008e 	.word	0x2000008e

080011c8 <ssd1306_UpdateScreen>:

//
//	Alle weizigingen in de buffer naar het scherm sturen
//
void ssd1306_UpdateScreen(void) 
{
 80011c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011ca:	2400      	movs	r4, #0
		ssd1306_WriteCommand(0xB0 + i);
		ssd1306_WriteCommand(0x00);
		ssd1306_WriteCommand(0x10);

		// We schrijven alles map per map weg
		if(HAL_I2C_Mem_Write(&hi2c1,SSD1306_I2C_ADDR,0x40,1,&SSD1306_Buffer[SSD1306_WIDTH * i],SSD1306_WIDTH,100)!=HAL_OK)
 80011cc:	4d12      	ldr	r5, [pc, #72]	; (8001218 <ssd1306_UpdateScreen+0x50>)
 80011ce:	4e13      	ldr	r6, [pc, #76]	; (800121c <ssd1306_UpdateScreen+0x54>)
		{
			Error_Handler();
 80011d0:	4f13      	ldr	r7, [pc, #76]	; (8001220 <ssd1306_UpdateScreen+0x58>)
{
 80011d2:	b085      	sub	sp, #20
		ssd1306_WriteCommand(0xB0 + i);
 80011d4:	f1a4 0050 	sub.w	r0, r4, #80	; 0x50
 80011d8:	b2c0      	uxtb	r0, r0
 80011da:	f7ff ffcd 	bl	8001178 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x00);
 80011de:	2000      	movs	r0, #0
 80011e0:	f7ff ffca 	bl	8001178 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x10);
 80011e4:	2010      	movs	r0, #16
 80011e6:	f7ff ffc7 	bl	8001178 <ssd1306_WriteCommand>
		if(HAL_I2C_Mem_Write(&hi2c1,SSD1306_I2C_ADDR,0x40,1,&SSD1306_Buffer[SSD1306_WIDTH * i],SSD1306_WIDTH,100)!=HAL_OK)
 80011ea:	2364      	movs	r3, #100	; 0x64
 80011ec:	9302      	str	r3, [sp, #8]
 80011ee:	2380      	movs	r3, #128	; 0x80
 80011f0:	9301      	str	r3, [sp, #4]
 80011f2:	eb05 13c4 	add.w	r3, r5, r4, lsl #7
 80011f6:	9300      	str	r3, [sp, #0]
 80011f8:	2240      	movs	r2, #64	; 0x40
 80011fa:	2301      	movs	r3, #1
 80011fc:	2178      	movs	r1, #120	; 0x78
 80011fe:	4630      	mov	r0, r6
 8001200:	f7ff fae0 	bl	80007c4 <HAL_I2C_Mem_Write>
 8001204:	b118      	cbz	r0, 800120e <ssd1306_UpdateScreen+0x46>
			Error_Handler();
 8001206:	2172      	movs	r1, #114	; 0x72
 8001208:	4638      	mov	r0, r7
 800120a:	f7ff ffb3 	bl	8001174 <_Error_Handler>
 800120e:	3401      	adds	r4, #1
	for (i = 0; i < 8; i++) {
 8001210:	2c08      	cmp	r4, #8
 8001212:	d1df      	bne.n	80011d4 <ssd1306_UpdateScreen+0xc>
		}
	}
}
 8001214:	b005      	add	sp, #20
 8001216:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001218:	2000008e 	.word	0x2000008e
 800121c:	20000494 	.word	0x20000494
 8001220:	080023ec 	.word	0x080023ec

08001224 <ssd1306_Init>:
{	
 8001224:	b508      	push	{r3, lr}
	ssd1306_WriteCommand(0xAE); //display off
 8001226:	20ae      	movs	r0, #174	; 0xae
 8001228:	f7ff ffa6 	bl	8001178 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode   
 800122c:	2020      	movs	r0, #32
 800122e:	f7ff ffa3 	bl	8001178 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001232:	2010      	movs	r0, #16
 8001234:	f7ff ffa0 	bl	8001178 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001238:	20b0      	movs	r0, #176	; 0xb0
 800123a:	f7ff ff9d 	bl	8001178 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800123e:	20c8      	movs	r0, #200	; 0xc8
 8001240:	f7ff ff9a 	bl	8001178 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //---set low column address
 8001244:	2000      	movs	r0, #0
 8001246:	f7ff ff97 	bl	8001178 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //---set high column address
 800124a:	2010      	movs	r0, #16
 800124c:	f7ff ff94 	bl	8001178 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x40); //--set start line address
 8001250:	2040      	movs	r0, #64	; 0x40
 8001252:	f7ff ff91 	bl	8001178 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x81); //--set contrast control register
 8001256:	2081      	movs	r0, #129	; 0x81
 8001258:	f7ff ff8e 	bl	8001178 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xFF);
 800125c:	20ff      	movs	r0, #255	; 0xff
 800125e:	f7ff ff8b 	bl	8001178 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127
 8001262:	20a1      	movs	r0, #161	; 0xa1
 8001264:	f7ff ff88 	bl	8001178 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA6); //--set normal display
 8001268:	20a6      	movs	r0, #166	; 0xa6
 800126a:	f7ff ff85 	bl	8001178 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64)
 800126e:	20a8      	movs	r0, #168	; 0xa8
 8001270:	f7ff ff82 	bl	8001178 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x3F); //
 8001274:	203f      	movs	r0, #63	; 0x3f
 8001276:	f7ff ff7f 	bl	8001178 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800127a:	20a4      	movs	r0, #164	; 0xa4
 800127c:	f7ff ff7c 	bl	8001178 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD3); //-set display offset
 8001280:	20d3      	movs	r0, #211	; 0xd3
 8001282:	f7ff ff79 	bl	8001178 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //-not offset
 8001286:	2000      	movs	r0, #0
 8001288:	f7ff ff76 	bl	8001178 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800128c:	20d5      	movs	r0, #213	; 0xd5
 800128e:	f7ff ff73 	bl	8001178 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001292:	20f0      	movs	r0, #240	; 0xf0
 8001294:	f7ff ff70 	bl	8001178 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001298:	20d9      	movs	r0, #217	; 0xd9
 800129a:	f7ff ff6d 	bl	8001178 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x22); //
 800129e:	2022      	movs	r0, #34	; 0x22
 80012a0:	f7ff ff6a 	bl	8001178 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration
 80012a4:	20da      	movs	r0, #218	; 0xda
 80012a6:	f7ff ff67 	bl	8001178 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x12);
 80012aa:	2012      	movs	r0, #18
 80012ac:	f7ff ff64 	bl	8001178 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDB); //--set vcomh
 80012b0:	20db      	movs	r0, #219	; 0xdb
 80012b2:	f7ff ff61 	bl	8001178 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80012b6:	2020      	movs	r0, #32
 80012b8:	f7ff ff5e 	bl	8001178 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80012bc:	208d      	movs	r0, #141	; 0x8d
 80012be:	f7ff ff5b 	bl	8001178 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x14); //
 80012c2:	2014      	movs	r0, #20
 80012c4:	f7ff ff58 	bl	8001178 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 80012c8:	20af      	movs	r0, #175	; 0xaf
 80012ca:	f7ff ff55 	bl	8001178 <ssd1306_WriteCommand>
	ssd1306_Fill(Black);
 80012ce:	2000      	movs	r0, #0
 80012d0:	f7ff ff6c 	bl	80011ac <ssd1306_Fill>
	ssd1306_UpdateScreen();
 80012d4:	f7ff ff78 	bl	80011c8 <ssd1306_UpdateScreen>
	SSD1306.Initialized = 1;
 80012d8:	2001      	movs	r0, #1
	SSD1306.CurrentX = 0;
 80012da:	2200      	movs	r2, #0
 80012dc:	4b02      	ldr	r3, [pc, #8]	; (80012e8 <ssd1306_Init+0xc4>)
	SSD1306.Initialized = 1;
 80012de:	7158      	strb	r0, [r3, #5]
	SSD1306.CurrentX = 0;
 80012e0:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80012e2:	805a      	strh	r2, [r3, #2]
}
 80012e4:	bd08      	pop	{r3, pc}
 80012e6:	bf00      	nop
 80012e8:	20000088 	.word	0x20000088

080012ec <ssd1306_DrawPixel>:
//	Y => Y coordinaat
//	color => kleur die pixel moet krijgen
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) 
 80012ec:	0603      	lsls	r3, r0, #24
{
 80012ee:	b510      	push	{r4, lr}
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) 
 80012f0:	d41a      	bmi.n	8001328 <ssd1306_DrawPixel+0x3c>
 80012f2:	293f      	cmp	r1, #63	; 0x3f
 80012f4:	d818      	bhi.n	8001328 <ssd1306_DrawPixel+0x3c>
		// We gaan niet buiten het scherm schrijven
		return;
	}
	
	// Kijken of de pixel geinverteerd moet worden
	if (SSD1306.Inverted) 
 80012f6:	4b0d      	ldr	r3, [pc, #52]	; (800132c <ssd1306_DrawPixel+0x40>)
 80012f8:	791b      	ldrb	r3, [r3, #4]
 80012fa:	b113      	cbz	r3, 8001302 <ssd1306_DrawPixel+0x16>
	{
		color = (SSD1306_COLOR)!color;
 80012fc:	fab2 f282 	clz	r2, r2
 8001300:	0952      	lsrs	r2, r2, #5
 8001302:	08cc      	lsrs	r4, r1, #3
	}
	
	// We zetten de juiste kleur voor de pixel
	if (color == White)
 8001304:	2a01      	cmp	r2, #1
 8001306:	4b0a      	ldr	r3, [pc, #40]	; (8001330 <ssd1306_DrawPixel+0x44>)
 8001308:	f001 0107 	and.w	r1, r1, #7
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800130c:	eb00 10c4 	add.w	r0, r0, r4, lsl #7
	if (color == White)
 8001310:	d104      	bne.n	800131c <ssd1306_DrawPixel+0x30>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001312:	408a      	lsls	r2, r1
 8001314:	5c19      	ldrb	r1, [r3, r0]
 8001316:	430a      	orrs	r2, r1
 8001318:	541a      	strb	r2, [r3, r0]
 800131a:	bd10      	pop	{r4, pc}
	} 
	else 
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800131c:	2201      	movs	r2, #1
 800131e:	408a      	lsls	r2, r1
 8001320:	5c19      	ldrb	r1, [r3, r0]
 8001322:	ea21 0102 	bic.w	r1, r1, r2
 8001326:	5419      	strb	r1, [r3, r0]
 8001328:	bd10      	pop	{r4, pc}
 800132a:	bf00      	nop
 800132c:	20000088 	.word	0x20000088
 8001330:	2000008e 	.word	0x2000008e

08001334 <ssd1306_WriteChar>:
//	ch 		=> char om weg te schrijven
//	Font 	=> Font waarmee we gaan schrijven
//	color 	=> Black or White
//
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 8001334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001338:	b087      	sub	sp, #28
 800133a:	4607      	mov	r7, r0
 800133c:	a806      	add	r0, sp, #24
 800133e:	e900 0006 	stmdb	r0, {r1, r2}
 8001342:	469b      	mov	fp, r3
	uint32_t i, b, j;
	
	// Kijken of er nog plaats is op deze lijn
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8001344:	4b20      	ldr	r3, [pc, #128]	; (80013c8 <ssd1306_WriteChar+0x94>)
 8001346:	f89d 9010 	ldrb.w	r9, [sp, #16]
 800134a:	881c      	ldrh	r4, [r3, #0]
 800134c:	9301      	str	r3, [sp, #4]
 800134e:	eb04 0209 	add.w	r2, r4, r9
 8001352:	2a7f      	cmp	r2, #127	; 0x7f
 8001354:	dc36      	bgt.n	80013c4 <ssd1306_WriteChar+0x90>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 8001356:	885b      	ldrh	r3, [r3, #2]
 8001358:	f89d a011 	ldrb.w	sl, [sp, #17]
 800135c:	9300      	str	r3, [sp, #0]
 800135e:	eb03 020a 	add.w	r2, r3, sl
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8001362:	2a3f      	cmp	r2, #63	; 0x3f
 8001364:	dc2e      	bgt.n	80013c4 <ssd1306_WriteChar+0x90>
	}
	
	// We gaan door het font
	for (i = 0; i < Font.FontHeight; i++)
	{
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001366:	2600      	movs	r6, #0
 8001368:	f1a7 0220 	sub.w	r2, r7, #32
 800136c:	fb0a f302 	mul.w	r3, sl, r2
 8001370:	9303      	str	r3, [sp, #12]
	for (i = 0; i < Font.FontHeight; i++)
 8001372:	4556      	cmp	r6, sl
 8001374:	d306      	bcc.n	8001384 <ssd1306_WriteChar+0x50>
			}
		}
	}
	
	// De huidige positie is nu verplaatst
	SSD1306.CurrentX += Font.FontWidth;
 8001376:	9b01      	ldr	r3, [sp, #4]
 8001378:	444c      	add	r4, r9
 800137a:	801c      	strh	r4, [r3, #0]
	
	// We geven het geschreven char terug voor validatie
	return ch;
}
 800137c:	4638      	mov	r0, r7
 800137e:	b007      	add	sp, #28
 8001380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		for (j = 0; j < Font.FontWidth; j++)
 8001384:	2500      	movs	r5, #0
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001386:	9b03      	ldr	r3, [sp, #12]
 8001388:	9905      	ldr	r1, [sp, #20]
 800138a:	18f2      	adds	r2, r6, r3
 800138c:	f831 3012 	ldrh.w	r3, [r1, r2, lsl #1]
 8001390:	9302      	str	r3, [sp, #8]
 8001392:	9b00      	ldr	r3, [sp, #0]
 8001394:	eb03 0806 	add.w	r8, r3, r6
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001398:	fa5f f888 	uxtb.w	r8, r8
		for (j = 0; j < Font.FontWidth; j++)
 800139c:	454d      	cmp	r5, r9
 800139e:	d301      	bcc.n	80013a4 <ssd1306_WriteChar+0x70>
	for (i = 0; i < Font.FontHeight; i++)
 80013a0:	3601      	adds	r6, #1
 80013a2:	e7e6      	b.n	8001372 <ssd1306_WriteChar+0x3e>
			if ((b << j) & 0x8000) 
 80013a4:	9b02      	ldr	r3, [sp, #8]
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80013a6:	1928      	adds	r0, r5, r4
			if ((b << j) & 0x8000) 
 80013a8:	fa03 f205 	lsl.w	r2, r3, r5
 80013ac:	0413      	lsls	r3, r2, #16
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80013ae:	bf56      	itet	pl
 80013b0:	fabb f28b 	clzpl	r2, fp
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80013b4:	465a      	movmi	r2, fp
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80013b6:	0952      	lsrpl	r2, r2, #5
 80013b8:	4641      	mov	r1, r8
 80013ba:	b2c0      	uxtb	r0, r0
 80013bc:	f7ff ff96 	bl	80012ec <ssd1306_DrawPixel>
		for (j = 0; j < Font.FontWidth; j++)
 80013c0:	3501      	adds	r5, #1
 80013c2:	e7eb      	b.n	800139c <ssd1306_WriteChar+0x68>
		return 0;
 80013c4:	2700      	movs	r7, #0
 80013c6:	e7d9      	b.n	800137c <ssd1306_WriteChar+0x48>
 80013c8:	20000088 	.word	0x20000088

080013cc <ssd1306_WriteString>:
// 	str => string om op het scherm te schrijven
//	Font => Het font dat gebruikt moet worden
//	color => Black or White
//
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color)
{
 80013cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80013ce:	461f      	mov	r7, r3
 80013d0:	466d      	mov	r5, sp
 80013d2:	e88d 0006 	stmia.w	sp, {r1, r2}
 80013d6:	1e46      	subs	r6, r0, #1
	// We schrijven alle char tot een nulbyte
	while (*str) 
 80013d8:	7874      	ldrb	r4, [r6, #1]
 80013da:	b14c      	cbz	r4, 80013f0 <ssd1306_WriteString+0x24>
	{
		if (ssd1306_WriteChar(*str, Font, color) != *str)
 80013dc:	e895 0006 	ldmia.w	r5, {r1, r2}
 80013e0:	4620      	mov	r0, r4
 80013e2:	463b      	mov	r3, r7
 80013e4:	f7ff ffa6 	bl	8001334 <ssd1306_WriteChar>
 80013e8:	f816 4f01 	ldrb.w	r4, [r6, #1]!
 80013ec:	42a0      	cmp	r0, r4
 80013ee:	d0f3      	beq.n	80013d8 <ssd1306_WriteString+0xc>
		str++;
	}
	
	// Alles gelukt, we sturen dus 0 terug
	return *str;
}
 80013f0:	4620      	mov	r0, r4
 80013f2:	b003      	add	sp, #12
 80013f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080013f8 <ssd1306_SetCursor>:
//	Zet de cursor op een coordinaat
//
void ssd1306_SetCursor(uint8_t x, uint8_t y) 
{
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80013f8:	4b01      	ldr	r3, [pc, #4]	; (8001400 <ssd1306_SetCursor+0x8>)
 80013fa:	8018      	strh	r0, [r3, #0]
	SSD1306.CurrentY = y;
 80013fc:	8059      	strh	r1, [r3, #2]
 80013fe:	4770      	bx	lr
 8001400:	20000088 	.word	0x20000088

08001404 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001404:	4b20      	ldr	r3, [pc, #128]	; (8001488 <HAL_MspInit+0x84>)
{
 8001406:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001408:	699a      	ldr	r2, [r3, #24]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800140a:	2003      	movs	r0, #3
  __HAL_RCC_AFIO_CLK_ENABLE();
 800140c:	f042 0201 	orr.w	r2, r2, #1
 8001410:	619a      	str	r2, [r3, #24]
 8001412:	699b      	ldr	r3, [r3, #24]
 8001414:	f003 0301 	and.w	r3, r3, #1
 8001418:	9301      	str	r3, [sp, #4]
 800141a:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800141c:	f7fe fede 	bl	80001dc <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8001420:	2200      	movs	r2, #0
 8001422:	f06f 000b 	mvn.w	r0, #11
 8001426:	4611      	mov	r1, r2
 8001428:	f7fe feea 	bl	8000200 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 800142c:	2200      	movs	r2, #0
 800142e:	f06f 000a 	mvn.w	r0, #10
 8001432:	4611      	mov	r1, r2
 8001434:	f7fe fee4 	bl	8000200 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8001438:	2200      	movs	r2, #0
 800143a:	f06f 0009 	mvn.w	r0, #9
 800143e:	4611      	mov	r1, r2
 8001440:	f7fe fede 	bl	8000200 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8001444:	2200      	movs	r2, #0
 8001446:	f06f 0004 	mvn.w	r0, #4
 800144a:	4611      	mov	r1, r2
 800144c:	f7fe fed8 	bl	8000200 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8001450:	2200      	movs	r2, #0
 8001452:	f06f 0003 	mvn.w	r0, #3
 8001456:	4611      	mov	r1, r2
 8001458:	f7fe fed2 	bl	8000200 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 800145c:	2200      	movs	r2, #0
 800145e:	f06f 0001 	mvn.w	r0, #1
 8001462:	4611      	mov	r1, r2
 8001464:	f7fe fecc 	bl	8000200 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001468:	2200      	movs	r2, #0
 800146a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800146e:	4611      	mov	r1, r2
 8001470:	f7fe fec6 	bl	8000200 <HAL_NVIC_SetPriority>

    /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
    */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001474:	4a05      	ldr	r2, [pc, #20]	; (800148c <HAL_MspInit+0x88>)
 8001476:	6853      	ldr	r3, [r2, #4]
 8001478:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800147c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001480:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001482:	b003      	add	sp, #12
 8001484:	f85d fb04 	ldr.w	pc, [sp], #4
 8001488:	40021000 	.word	0x40021000
 800148c:	40010000 	.word	0x40010000

08001490 <NMI_Handler>:
 8001490:	4770      	bx	lr

08001492 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8001492:	e7fe      	b.n	8001492 <HardFault_Handler>

08001494 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8001494:	e7fe      	b.n	8001494 <MemManage_Handler>

08001496 <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8001496:	e7fe      	b.n	8001496 <BusFault_Handler>

08001498 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8001498:	e7fe      	b.n	8001498 <UsageFault_Handler>

0800149a <SVC_Handler>:
 800149a:	4770      	bx	lr

0800149c <DebugMon_Handler>:
 800149c:	4770      	bx	lr

0800149e <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 800149e:	4770      	bx	lr

080014a0 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80014a0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014a2:	f7fe fe89 	bl	80001b8 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 80014aa:	f7fe beff 	b.w	80002ac <HAL_SYSTICK_IRQHandler>
	...

080014b0 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80014b0:	4b0f      	ldr	r3, [pc, #60]	; (80014f0 <SystemInit+0x40>)
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	f042 0201 	orr.w	r2, r2, #1
 80014b8:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80014ba:	6859      	ldr	r1, [r3, #4]
 80014bc:	4a0d      	ldr	r2, [pc, #52]	; (80014f4 <SystemInit+0x44>)
 80014be:	400a      	ands	r2, r1
 80014c0:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80014c8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80014cc:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80014d4:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80014d6:	685a      	ldr	r2, [r3, #4]
 80014d8:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80014dc:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80014de:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80014e2:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80014e4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80014e8:	4b03      	ldr	r3, [pc, #12]	; (80014f8 <SystemInit+0x48>)
 80014ea:	609a      	str	r2, [r3, #8]
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	40021000 	.word	0x40021000
 80014f4:	f8ff0000 	.word	0xf8ff0000
 80014f8:	e000ed00 	.word	0xe000ed00

080014fc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80014fc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80014fe:	e003      	b.n	8001508 <LoopCopyDataInit>

08001500 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001500:	4b0b      	ldr	r3, [pc, #44]	; (8001530 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001502:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001504:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001506:	3104      	adds	r1, #4

08001508 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001508:	480a      	ldr	r0, [pc, #40]	; (8001534 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800150a:	4b0b      	ldr	r3, [pc, #44]	; (8001538 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800150c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800150e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001510:	d3f6      	bcc.n	8001500 <CopyDataInit>
  ldr r2, =_sbss
 8001512:	4a0a      	ldr	r2, [pc, #40]	; (800153c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001514:	e002      	b.n	800151c <LoopFillZerobss>

08001516 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001516:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001518:	f842 3b04 	str.w	r3, [r2], #4

0800151c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800151c:	4b08      	ldr	r3, [pc, #32]	; (8001540 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800151e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001520:	d3f9      	bcc.n	8001516 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001522:	f7ff ffc5 	bl	80014b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001526:	f000 f80f 	bl	8001548 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800152a:	f7ff fded 	bl	8001108 <main>
  bx lr
 800152e:	4770      	bx	lr
  ldr r3, =_sidata
 8001530:	08002444 	.word	0x08002444
  ldr r0, =_sdata
 8001534:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001538:	20000014 	.word	0x20000014
  ldr r2, =_sbss
 800153c:	20000014 	.word	0x20000014
  ldr r3, = _ebss
 8001540:	200004e8 	.word	0x200004e8

08001544 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001544:	e7fe      	b.n	8001544 <ADC1_2_IRQHandler>
	...

08001548 <__libc_init_array>:
 8001548:	b570      	push	{r4, r5, r6, lr}
 800154a:	2500      	movs	r5, #0
 800154c:	4e0c      	ldr	r6, [pc, #48]	; (8001580 <__libc_init_array+0x38>)
 800154e:	4c0d      	ldr	r4, [pc, #52]	; (8001584 <__libc_init_array+0x3c>)
 8001550:	1ba4      	subs	r4, r4, r6
 8001552:	10a4      	asrs	r4, r4, #2
 8001554:	42a5      	cmp	r5, r4
 8001556:	d109      	bne.n	800156c <__libc_init_array+0x24>
 8001558:	f000 f874 	bl	8001644 <_init>
 800155c:	2500      	movs	r5, #0
 800155e:	4e0a      	ldr	r6, [pc, #40]	; (8001588 <__libc_init_array+0x40>)
 8001560:	4c0a      	ldr	r4, [pc, #40]	; (800158c <__libc_init_array+0x44>)
 8001562:	1ba4      	subs	r4, r4, r6
 8001564:	10a4      	asrs	r4, r4, #2
 8001566:	42a5      	cmp	r5, r4
 8001568:	d105      	bne.n	8001576 <__libc_init_array+0x2e>
 800156a:	bd70      	pop	{r4, r5, r6, pc}
 800156c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001570:	4798      	blx	r3
 8001572:	3501      	adds	r5, #1
 8001574:	e7ee      	b.n	8001554 <__libc_init_array+0xc>
 8001576:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800157a:	4798      	blx	r3
 800157c:	3501      	adds	r5, #1
 800157e:	e7f2      	b.n	8001566 <__libc_init_array+0x1e>
 8001580:	0800243c 	.word	0x0800243c
 8001584:	0800243c 	.word	0x0800243c
 8001588:	0800243c 	.word	0x0800243c
 800158c:	08002440 	.word	0x08002440

08001590 <__itoa>:
 8001590:	1e93      	subs	r3, r2, #2
 8001592:	2b22      	cmp	r3, #34	; 0x22
 8001594:	b510      	push	{r4, lr}
 8001596:	460c      	mov	r4, r1
 8001598:	d904      	bls.n	80015a4 <__itoa+0x14>
 800159a:	2300      	movs	r3, #0
 800159c:	461c      	mov	r4, r3
 800159e:	700b      	strb	r3, [r1, #0]
 80015a0:	4620      	mov	r0, r4
 80015a2:	bd10      	pop	{r4, pc}
 80015a4:	2a0a      	cmp	r2, #10
 80015a6:	d109      	bne.n	80015bc <__itoa+0x2c>
 80015a8:	2800      	cmp	r0, #0
 80015aa:	da07      	bge.n	80015bc <__itoa+0x2c>
 80015ac:	232d      	movs	r3, #45	; 0x2d
 80015ae:	700b      	strb	r3, [r1, #0]
 80015b0:	2101      	movs	r1, #1
 80015b2:	4240      	negs	r0, r0
 80015b4:	4421      	add	r1, r4
 80015b6:	f000 f805 	bl	80015c4 <__utoa>
 80015ba:	e7f1      	b.n	80015a0 <__itoa+0x10>
 80015bc:	2100      	movs	r1, #0
 80015be:	e7f9      	b.n	80015b4 <__itoa+0x24>

080015c0 <itoa>:
 80015c0:	f7ff bfe6 	b.w	8001590 <__itoa>

080015c4 <__utoa>:
 80015c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015c6:	b08b      	sub	sp, #44	; 0x2c
 80015c8:	4603      	mov	r3, r0
 80015ca:	460f      	mov	r7, r1
 80015cc:	466d      	mov	r5, sp
 80015ce:	4c1c      	ldr	r4, [pc, #112]	; (8001640 <__utoa+0x7c>)
 80015d0:	f104 0e20 	add.w	lr, r4, #32
 80015d4:	462e      	mov	r6, r5
 80015d6:	6820      	ldr	r0, [r4, #0]
 80015d8:	6861      	ldr	r1, [r4, #4]
 80015da:	3408      	adds	r4, #8
 80015dc:	c603      	stmia	r6!, {r0, r1}
 80015de:	4574      	cmp	r4, lr
 80015e0:	4635      	mov	r5, r6
 80015e2:	d1f7      	bne.n	80015d4 <__utoa+0x10>
 80015e4:	7921      	ldrb	r1, [r4, #4]
 80015e6:	6820      	ldr	r0, [r4, #0]
 80015e8:	7131      	strb	r1, [r6, #4]
 80015ea:	1e91      	subs	r1, r2, #2
 80015ec:	2922      	cmp	r1, #34	; 0x22
 80015ee:	6030      	str	r0, [r6, #0]
 80015f0:	f04f 0100 	mov.w	r1, #0
 80015f4:	d904      	bls.n	8001600 <__utoa+0x3c>
 80015f6:	7039      	strb	r1, [r7, #0]
 80015f8:	460f      	mov	r7, r1
 80015fa:	4638      	mov	r0, r7
 80015fc:	b00b      	add	sp, #44	; 0x2c
 80015fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001600:	1e78      	subs	r0, r7, #1
 8001602:	4606      	mov	r6, r0
 8001604:	fbb3 f5f2 	udiv	r5, r3, r2
 8001608:	fb02 3315 	mls	r3, r2, r5, r3
 800160c:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8001610:	4473      	add	r3, lr
 8001612:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001616:	1c4c      	adds	r4, r1, #1
 8001618:	f806 3f01 	strb.w	r3, [r6, #1]!
 800161c:	462b      	mov	r3, r5
 800161e:	b965      	cbnz	r5, 800163a <__utoa+0x76>
 8001620:	553d      	strb	r5, [r7, r4]
 8001622:	187a      	adds	r2, r7, r1
 8001624:	1acc      	subs	r4, r1, r3
 8001626:	42a3      	cmp	r3, r4
 8001628:	dae7      	bge.n	80015fa <__utoa+0x36>
 800162a:	7844      	ldrb	r4, [r0, #1]
 800162c:	7815      	ldrb	r5, [r2, #0]
 800162e:	3301      	adds	r3, #1
 8001630:	f800 5f01 	strb.w	r5, [r0, #1]!
 8001634:	f802 4901 	strb.w	r4, [r2], #-1
 8001638:	e7f4      	b.n	8001624 <__utoa+0x60>
 800163a:	4621      	mov	r1, r4
 800163c:	e7e2      	b.n	8001604 <__utoa+0x40>
 800163e:	bf00      	nop
 8001640:	08002415 	.word	0x08002415

08001644 <_init>:
 8001644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001646:	bf00      	nop
 8001648:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800164a:	bc08      	pop	{r3}
 800164c:	469e      	mov	lr, r3
 800164e:	4770      	bx	lr

08001650 <_fini>:
 8001650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001652:	bf00      	nop
 8001654:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001656:	bc08      	pop	{r3}
 8001658:	469e      	mov	lr, r3
 800165a:	4770      	bx	lr
